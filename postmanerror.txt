<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <meta name="robots" content="NONE,NOARCHIVE">
  <title>TypeError
          at /api/portfolios/1/add_stock/</title>
  <style type="text/css">
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background-color:#fff; color:#000; }
    body>div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; }
    h2 { margin-bottom:.8em; }
    h3 { margin:1em 0 .5em 0; }
    h4 { margin:0 0 .5em 0; font-weight: normal; }
    code, pre { font-size: 100%; white-space: pre-wrap; }
    table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; }
    tbody td, tbody th { vertical-align:top; padding:2px 3px; }
    thead th {
      padding:1px 6px 1px 3px; background:#fefefe; text-align:left;
      font-weight:normal; font-size:11px; border:1px solid #ddd;
    }
    tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    table.vars { margin:5px 0 2px 40px; }
    table.vars td, table.req td { font-family:monospace; }
    table td.code { width:100%; }
    table td.code pre { overflow:hidden; }
    table.source th { color:#666; }
    table.source td { font-family:monospace; white-space:pre; border-bottom:1px solid #eee; }
    ul.traceback { list-style-type:none; color: #222; }
    ul.traceback li.frame { padding-bottom:1em; color:#4f4f4f; }
    ul.traceback li.user { background-color:#e0e0e0; color:#000 }
    div.context { padding:10px 0; overflow:hidden; }
    div.context ol { padding-left:30px; margin:0 10px; list-style-position: inside; }
    div.context ol li { font-family:monospace; white-space:pre; color:#777; cursor:pointer; padding-left: 2px; }
    div.context ol li pre { display:inline; }
    div.context ol.context-line li { color:#464646; background-color:#dfdfdf; padding: 3px 2px; }
    div.context ol.context-line li span { position:absolute; right:32px; }
    .user div.context ol.context-line li { background-color:#bbb; color:#000; }
    .user div.context ol li { color:#666; }
    div.commands { margin-left: 40px; }
    div.commands a { color:#555; text-decoration:none; }
    .user div.commands a { color: black; }
    #summary { background: #ffc; }
    #summary h2 { font-weight: normal; color: #666; }
    #explanation { background:#eee; }
    #template, #template-not-exist { background:#f6f6f6; }
    #template-not-exist ul { margin: 0 0 10px 20px; }
    #template-not-exist .postmortem-section { margin-bottom: 3px; }
    #unicode-hint { background:#eee; }
    #traceback { background:#eee; }
    #requestinfo { background:#f6f6f6; padding-left:120px; }
    #summary table { border:none; background:transparent; }
    #requestinfo h2, #requestinfo h3 { position:relative; margin-left:-100px; }
    #requestinfo h3 { margin-bottom:-1em; }
    .error { background: #ffc; }
    .specific { color:#cc3300; font-weight:bold; }
    h2 span.commands { font-size:.7em; font-weight:normal; }
    span.commands a:link {color:#5E5694;}
    pre.exception_value { font-family: sans-serif; color: #575757; font-size: 1.5em; margin: 10px 0 10px 0; }
    .append-bottom { margin-bottom: 10px; }
    .fname { user-select: all; }
  </style>
  
  <script>
    function hideAll(elems) {
      for (var e = 0; e < elems.length; e++) {
        elems[e].style.display = 'none';
      }
    }
    window.onload = function() {
      hideAll(document.querySelectorAll('table.vars'));
      hideAll(document.querySelectorAll('ol.pre-context'));
      hideAll(document.querySelectorAll('ol.post-context'));
      hideAll(document.querySelectorAll('div.pastebin'));
    }
    function toggle() {
      for (var i = 0; i < arguments.length; i++) {
        var e = document.getElementById(arguments[i]);
        if (e) {
          e.style.display = e.style.display == 'none' ? 'block': 'none';
        }
      }
      return false;
    }
    function varToggle(link, id) {
      toggle('v' + id);
      var s = link.getElementsByTagName('span')[0];
      var uarr = String.fromCharCode(0x25b6);
      var darr = String.fromCharCode(0x25bc);
      s.textContent = s.textContent == uarr ? darr : uarr;
      return false;
    }
    function switchPastebinFriendly(link) {
      s1 = "Switch to copy-and-paste view";
      s2 = "Switch back to interactive view";
      link.textContent = link.textContent.trim() == s1 ? s2: s1;
      toggle('browserTraceback', 'pastebinTraceback');
      return false;
    }
  </script>
  
</head>
<body>
<div id="summary">
  <h1>TypeError
       at /api/portfolios/1/add_stock/</h1>
  <pre class="exception_value">Got a `TypeError` when calling `PortfolioStock.objects.create()`. This may be because you have a writable field on the serializer class that is not a valid argument to `PortfolioStock.objects.create()`. You may need to make the field read-only, or override the PortfolioStockSerializer.create() method to handle this correctly.
Original exception was:
 Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 1823, in get_prep_value
    return int(value)
TypeError: int() argument must be a string, a bytes-like object or a number, not &#x27;Stock&#x27;

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.9/site-packages/rest_framework/serializers.py&quot;, line 939, in create
    instance = ModelClass._default_manager.create(**validated_data)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, line 453, in create
    obj.save(force_insert=True, using=self.db)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 726, in save
    self.save_base(using=using, force_insert=force_insert,
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 763, in save_base
    updated = self._save_table(
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 868, in _save_table
    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 906, in _do_insert
    return manager._insert(
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, line 1270, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1415, in execute_sql
    for sql, params in self.as_sql():
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1358, in as_sql
    value_rows = [
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1359, in &lt;listcomp&gt;
    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1359, in &lt;listcomp&gt;
    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1300, in prepare_value
    value = field.get_db_prep_save(value, connection=self.connection)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/related.py&quot;, line 971, in get_db_prep_save
    return self.target_field.get_db_prep_save(value, connection=connection)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 842, in get_db_prep_save
    return self.get_db_prep_value(value, connection=connection, prepared=False)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 2486, in get_db_prep_value
    value = self.get_prep_value(value)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 1825, in get_prep_value
    raise e.__class__(
TypeError: Field &#x27;id&#x27; expected a number but got &lt;Stock: Microsoft Corporation (MSFT)&gt;.
</pre>
  <table class="meta">

    <tr>
      <th>Request Method:</th>
      <td>POST</td>
    </tr>
    <tr>
      <th>Request URL:</th>
      <td>http://localhost:8000/api/portfolios/1/add_stock/</td>
    </tr>

    <tr>
      <th>Django Version:</th>
      <td>3.2.4</td>
    </tr>

    <tr>
      <th>Exception Type:</th>
      <td>TypeError</td>
    </tr>


    <tr>
      <th>Exception Value:</th>
      <td><pre>Got a `TypeError` when calling `PortfolioStock.objects.create()`. This may be because you have a writable field on the serializer class that is not a valid argument to `PortfolioStock.objects.create()`. You may need to make the field read-only, or override the PortfolioStockSerializer.create() method to handle this correctly.
Original exception was:
 Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 1823, in get_prep_value
    return int(value)
TypeError: int() argument must be a string, a bytes-like object or a number, not &#x27;Stock&#x27;

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.9/site-packages/rest_framework/serializers.py&quot;, line 939, in create
    instance = ModelClass._default_manager.create(**validated_data)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, line 453, in create
    obj.save(force_insert=True, using=self.db)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 726, in save
    self.save_base(using=using, force_insert=force_insert,
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 763, in save_base
    updated = self._save_table(
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 868, in _save_table
    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 906, in _do_insert
    return manager._insert(
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, line 1270, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1415, in execute_sql
    for sql, params in self.as_sql():
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1358, in as_sql
    value_rows = [
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1359, in &lt;listcomp&gt;
    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1359, in &lt;listcomp&gt;
    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1300, in prepare_value
    value = field.get_db_prep_save(value, connection=self.connection)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/related.py&quot;, line 971, in get_db_prep_save
    return self.target_field.get_db_prep_save(value, connection=connection)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 842, in get_db_prep_save
    return self.get_db_prep_value(value, connection=connection, prepared=False)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 2486, in get_db_prep_value
    value = self.get_prep_value(value)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 1825, in get_prep_value
    raise e.__class__(
TypeError: Field &#x27;id&#x27; expected a number but got &lt;Stock: Microsoft Corporation (MSFT)&gt;.
</pre></td>
    </tr>


    <tr>
      <th>Exception Location:</th>
      <td><span class="fname">/usr/local/lib/python3.9/site-packages/rest_framework/serializers.py</span>, line 958, in create</td>
    </tr>

    <tr>
      <th>Python Executable:</th>
      <td>/usr/local/bin/python</td>
    </tr>
    <tr>
      <th>Python Version:</th>
      <td>3.9.19</td>
    </tr>
    <tr>
      <th>Python Path:</th>
      <td><pre>[&#x27;/backend&#x27;,
 &#x27;/usr/local/lib/python39.zip&#x27;,
 &#x27;/usr/local/lib/python3.9&#x27;,
 &#x27;/usr/local/lib/python3.9/lib-dynload&#x27;,
 &#x27;/usr/local/lib/python3.9/site-packages&#x27;]</pre></td>
    </tr>
    <tr>
      <th>Server time:</th>
      <td>Fri, 14 Jun 2024 19:49:31 +0000</td>
    </tr>
  </table>
</div>




<div id="traceback">
  <h2>Traceback <span class="commands"><a href="#" onclick="return switchPastebinFriendly(this);">
    Switch to copy-and-paste view</a></span>
  </h2>
  <div id="browserTraceback">
    <ul class="traceback">
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py</code>, line 1823, in get_prep_value
          

          
            <div class="context" id="c281473507011328">
              
                <ol start="1816" class="pre-context" id="pre281473507011328">
                
                  <li onclick="toggle('pre281473507011328', 'post281473507011328')"><pre>        return validators_</pre></li>
                
                  <li onclick="toggle('pre281473507011328', 'post281473507011328')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473507011328', 'post281473507011328')"><pre>    def get_prep_value(self, value):</pre></li>
                
                  <li onclick="toggle('pre281473507011328', 'post281473507011328')"><pre>        value = super().get_prep_value(value)</pre></li>
                
                  <li onclick="toggle('pre281473507011328', 'post281473507011328')"><pre>        if value is None:</pre></li>
                
                  <li onclick="toggle('pre281473507011328', 'post281473507011328')"><pre>            return None</pre></li>
                
                  <li onclick="toggle('pre281473507011328', 'post281473507011328')"><pre>        try:</pre></li>
                
                </ol>
              
              <ol start="1823" class="context-line">
                <li onclick="toggle('pre281473507011328', 'post281473507011328')"><pre>            return int(value)</pre> <span>…</span></li>
              </ol>
              
                <ol start='1824' class="post-context" id="post281473507011328">
                  
                  <li onclick="toggle('pre281473507011328', 'post281473507011328')"><pre>        except (TypeError, ValueError) as e:</pre></li>
                  
                  <li onclick="toggle('pre281473507011328', 'post281473507011328')"><pre>            raise e.__class__(</pre></li>
                  
                  <li onclick="toggle('pre281473507011328', 'post281473507011328')"><pre>                &quot;Field &#x27;%s&#x27; expected a number but got %r.&quot; % (self.name, value),</pre></li>
                  
                  <li onclick="toggle('pre281473507011328', 'post281473507011328')"><pre>            ) from e</pre></li>
                  
                  <li onclick="toggle('pre281473507011328', 'post281473507011328')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473507011328', 'post281473507011328')"><pre>    def get_internal_type(self):</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473507011328')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473507011328">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>__class__</td>
                    <td class="code"><pre>&lt;class &#x27;django.db.models.fields.IntegerField&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.fields.BigAutoField: id&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>value</td>
                    <td class="code"><pre>&lt;Stock: Microsoft Corporation (MSFT)&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
          <li><h3>
          
            The above exception (int() argument must be a string, a bytes-like object or a number, not &#x27;Stock&#x27;) was the direct cause of the following exception:
          
        </h3></li>
        
        <li class="frame user">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/rest_framework/serializers.py</code>, line 939, in create
          

          
            <div class="context" id="c281473509815104">
              
                <ol start="932" class="pre-context" id="pre281473509815104">
                
                  <li onclick="toggle('pre281473509815104', 'post281473509815104')"><pre>        info = model_meta.get_field_info(ModelClass)</pre></li>
                
                  <li onclick="toggle('pre281473509815104', 'post281473509815104')"><pre>        many_to_many = {}</pre></li>
                
                  <li onclick="toggle('pre281473509815104', 'post281473509815104')"><pre>        for field_name, relation_info in info.relations.items():</pre></li>
                
                  <li onclick="toggle('pre281473509815104', 'post281473509815104')"><pre>            if relation_info.to_many and (field_name in validated_data):</pre></li>
                
                  <li onclick="toggle('pre281473509815104', 'post281473509815104')"><pre>                many_to_many[field_name] = validated_data.pop(field_name)</pre></li>
                
                  <li onclick="toggle('pre281473509815104', 'post281473509815104')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473509815104', 'post281473509815104')"><pre>        try:</pre></li>
                
                </ol>
              
              <ol start="939" class="context-line">
                <li onclick="toggle('pre281473509815104', 'post281473509815104')"><pre>            instance = ModelClass._default_manager.create(**validated_data)</pre> <span>…</span></li>
              </ol>
              
                <ol start='940' class="post-context" id="post281473509815104">
                  
                  <li onclick="toggle('pre281473509815104', 'post281473509815104')"><pre>        except TypeError:</pre></li>
                  
                  <li onclick="toggle('pre281473509815104', 'post281473509815104')"><pre>            tb = traceback.format_exc()</pre></li>
                  
                  <li onclick="toggle('pre281473509815104', 'post281473509815104')"><pre>            msg = (</pre></li>
                  
                  <li onclick="toggle('pre281473509815104', 'post281473509815104')"><pre>                &#x27;Got a `TypeError` when calling `%s.%s.create()`. &#x27;</pre></li>
                  
                  <li onclick="toggle('pre281473509815104', 'post281473509815104')"><pre>                &#x27;This may be because you have a writable field on the &#x27;</pre></li>
                  
                  <li onclick="toggle('pre281473509815104', 'post281473509815104')"><pre>                &#x27;serializer class that is not a valid argument to &#x27;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509815104')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509815104">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>ModelClass</td>
                    <td class="code"><pre>&lt;class &#x27;portfolio.models.PortfolioStock&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>field_name</td>
                    <td class="code"><pre>&#x27;stock&#x27;</pre></td>
                  </tr>
                
                  <tr>
                    <td>info</td>
                    <td class="code"><pre>FieldResult(pk=&lt;django.db.models.fields.BigAutoField: id&gt;, fields=OrderedDict([(&#x27;quantity&#x27;, &lt;django.db.models.fields.IntegerField: quantity&gt;)]), forward_relations=OrderedDict([(&#x27;portfolio&#x27;, RelationInfo(model_field=&lt;django.db.models.fields.related.ForeignKey: portfolio&gt;, related_model=&lt;class &#x27;portfolio.models.Portfolio&#x27;&gt;, to_many=False, to_field=&#x27;id&#x27;, has_through_model=False, reverse=False)), (&#x27;stock&#x27;, RelationInfo(model_field=&lt;django.db.models.fields.related.ForeignKey: stock&gt;, related_model=&lt;class &#x27;portfolio.models.Stock&#x27;&gt;, to_many=False, to_field=&#x27;id&#x27;, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([(&#x27;pk&#x27;, &lt;django.db.models.fields.BigAutoField: id&gt;), (&#x27;id&#x27;, &lt;django.db.models.fields.BigAutoField: id&gt;), (&#x27;quantity&#x27;, &lt;django.db.models.fields.IntegerField: quantity&gt;)]), relations=OrderedDict([(&#x27;portfolio&#x27;, RelationInfo(model_field=&lt;django.db.models.fields.related.ForeignKey: portfolio&gt;, related_model=&lt;class &#x27;portfolio.models.Portfolio&#x27;&gt;, to_many=False, to_field=&#x27;id&#x27;, has_through_model=False, reverse=False)), (&#x27;stock&#x27;, RelationInfo(model_field=&lt;django.db.models.fields.related.ForeignKey: stock&gt;, related_model=&lt;class &#x27;portfolio.models.Stock&#x27;&gt;, to_many=False, to_field=&#x27;id&#x27;, has_through_model=False, reverse=False))]))</pre></td>
                  </tr>
                
                  <tr>
                    <td>many_to_many</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>msg</td>
                    <td class="code"><pre>(&#x27;Got a `TypeError` when calling `PortfolioStock.objects.create()`. This may &#x27;
 &#x27;be because you have a writable field on the serializer class that is not a &#x27;
 &#x27;valid argument to `PortfolioStock.objects.create()`. You may need to make &#x27;
 &#x27;the field read-only, or override the PortfolioStockSerializer.create() &#x27;
 &#x27;method to handle this correctly.\n&#x27;
 &#x27;Original exception was:\n&#x27;
 &#x27; Traceback (most recent call last):\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, &#x27;
 &#x27;line 1823, in get_prep_value\n&#x27;
 &#x27;    return int(value)\n&#x27;
 &#x27;TypeError: int() argument must be a string, a bytes-like object or a number, &#x27;
 &quot;not &#x27;Stock&#x27;\n&quot;
 &#x27;\n&#x27;
 &#x27;The above exception was the direct cause of the following exception:\n&#x27;
 &#x27;\n&#x27;
 &#x27;Traceback (most recent call last):\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/rest_framework/serializers.py&quot;, line &#x27;
 &#x27;939, in create\n&#x27;
 &#x27;    instance = ModelClass._default_manager.create(**validated_data)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, &#x27;
 &#x27;line 85, in manager_method\n&#x27;
 &#x27;    return getattr(self.get_queryset(), name)(*args, **kwargs)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, &#x27;
 &#x27;line 453, in create\n&#x27;
 &#x27;    obj.save(force_insert=True, using=self.db)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, &#x27;
 &#x27;line 726, in save\n&#x27;
 &#x27;    self.save_base(using=using, force_insert=force_insert,\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, &#x27;
 &#x27;line 763, in save_base\n&#x27;
 &#x27;    updated = self._save_table(\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, &#x27;
 &#x27;line 868, in _save_table\n&#x27;
 &#x27;    results = self._do_insert(cls._base_manager, using, fields, &#x27;
 &#x27;returning_fields, raw)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, &#x27;
 &#x27;line 906, in _do_insert\n&#x27;
 &#x27;    return manager._insert(\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, &#x27;
 &#x27;line 85, in manager_method\n&#x27;
 &#x27;    return getattr(self.get_queryset(), name)(*args, **kwargs)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, &#x27;
 &#x27;line 1270, in _insert\n&#x27;
 &#x27;    return query.get_compiler(using=using).execute_sql(returning_fields)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1415, in execute_sql\n&#x27;
 &#x27;    for sql, params in self.as_sql():\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1358, in as_sql\n&#x27;
 &#x27;    value_rows = [\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1359, in &lt;listcomp&gt;\n&#x27;
 &#x27;    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in &#x27;
 &#x27;fields]\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1359, in &lt;listcomp&gt;\n&#x27;
 &#x27;    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in &#x27;
 &#x27;fields]\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1300, in prepare_value\n&#x27;
 &#x27;    value = field.get_db_prep_save(value, connection=self.connection)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/related.py&quot;, &#x27;
 &#x27;line 971, in get_db_prep_save\n&#x27;
 &#x27;    return self.target_field.get_db_prep_save(value, connection=connection)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, &#x27;
 &#x27;line 842, in get_db_prep_save\n&#x27;
 &#x27;    return self.get_db_prep_value(value, connection=connection, &#x27;
 &#x27;prepared=False)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, &#x27;
 &#x27;line 2486, in get_db_prep_value\n&#x27;
 &#x27;    value = self.get_prep_value(value)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, &#x27;
 &#x27;line 1825, in get_prep_value\n&#x27;
 &#x27;    raise e.__class__(\n&#x27;
 &quot;TypeError: Field &#x27;id&#x27; expected a number but got &lt;Stock: Microsoft &quot;
 &#x27;Corporat… &lt;trimmed 4112 bytes string&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>relation_info</td>
                    <td class="code"><pre>RelationInfo(model_field=&lt;django.db.models.fields.related.ForeignKey: stock&gt;, related_model=&lt;class &#x27;portfolio.models.Stock&#x27;&gt;, to_many=False, to_field=&#x27;id&#x27;, has_through_model=False, reverse=False)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>PortfolioStockSerializer(context={&#x27;request&#x27;: &lt;rest_framework.request.Request: POST &#x27;/api/portfolios/1/add_stock/&#x27;&gt;, &#x27;format&#x27;: None, &#x27;view&#x27;: &lt;portfolio.views.PortfolioStockCreate object&gt;}, data={&#x27;stock_id&#x27;: 2, &#x27;quantity&#x27;: 5}):
    stock = StockSerializer(read_only=True):
        id = IntegerField(label=&#x27;ID&#x27;, read_only=True)
        symbol = CharField(max_length=10, validators=[&lt;UniqueValidator(queryset=Stock.objects.all())&gt;])
        name = CharField(allow_null=True, max_length=100, required=False)
        price = FloatField(required=False)
    stock_id = PrimaryKeyRelatedField(queryset=&lt;QuerySet [&lt;Stock: Apple Inc. (AAPL)&gt;, &lt;Stock: Microsoft Corporation (MSFT)&gt;, &lt;Stock: Alphabet Inc. (GOOGL)&gt;, &lt;Stock: Amazon.com, Inc. (AMZN)&gt;, &lt;Stock: Tesla, Inc. (TSLA)&gt;, &lt;Stock: N/A (FB)&gt;, &lt;Stock: NVIDIA Corporation (NVDA)&gt;, &lt;Stock: Berkshire Hathaway Inc. New (BRK-B)&gt;, &lt;Stock: JP Morgan Chase &amp; Co. (JPM)&gt;, &lt;Stock: Johnson &amp; Johnson (JNJ)&gt;]&gt;, write_only=True)
    quantity = IntegerField(max_value=2147483647, min_value=-2147483648)</pre></td>
                  </tr>
                
                  <tr>
                    <td>tb</td>
                    <td class="code"><pre>(&#x27;Traceback (most recent call last):\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, &#x27;
 &#x27;line 1823, in get_prep_value\n&#x27;
 &#x27;    return int(value)\n&#x27;
 &#x27;TypeError: int() argument must be a string, a bytes-like object or a number, &#x27;
 &quot;not &#x27;Stock&#x27;\n&quot;
 &#x27;\n&#x27;
 &#x27;The above exception was the direct cause of the following exception:\n&#x27;
 &#x27;\n&#x27;
 &#x27;Traceback (most recent call last):\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/rest_framework/serializers.py&quot;, line &#x27;
 &#x27;939, in create\n&#x27;
 &#x27;    instance = ModelClass._default_manager.create(**validated_data)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, &#x27;
 &#x27;line 85, in manager_method\n&#x27;
 &#x27;    return getattr(self.get_queryset(), name)(*args, **kwargs)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, &#x27;
 &#x27;line 453, in create\n&#x27;
 &#x27;    obj.save(force_insert=True, using=self.db)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, &#x27;
 &#x27;line 726, in save\n&#x27;
 &#x27;    self.save_base(using=using, force_insert=force_insert,\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, &#x27;
 &#x27;line 763, in save_base\n&#x27;
 &#x27;    updated = self._save_table(\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, &#x27;
 &#x27;line 868, in _save_table\n&#x27;
 &#x27;    results = self._do_insert(cls._base_manager, using, fields, &#x27;
 &#x27;returning_fields, raw)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, &#x27;
 &#x27;line 906, in _do_insert\n&#x27;
 &#x27;    return manager._insert(\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, &#x27;
 &#x27;line 85, in manager_method\n&#x27;
 &#x27;    return getattr(self.get_queryset(), name)(*args, **kwargs)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, &#x27;
 &#x27;line 1270, in _insert\n&#x27;
 &#x27;    return query.get_compiler(using=using).execute_sql(returning_fields)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1415, in execute_sql\n&#x27;
 &#x27;    for sql, params in self.as_sql():\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1358, in as_sql\n&#x27;
 &#x27;    value_rows = [\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1359, in &lt;listcomp&gt;\n&#x27;
 &#x27;    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in &#x27;
 &#x27;fields]\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1359, in &lt;listcomp&gt;\n&#x27;
 &#x27;    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in &#x27;
 &#x27;fields]\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1300, in prepare_value\n&#x27;
 &#x27;    value = field.get_db_prep_save(value, connection=self.connection)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/related.py&quot;, &#x27;
 &#x27;line 971, in get_db_prep_save\n&#x27;
 &#x27;    return self.target_field.get_db_prep_save(value, connection=connection)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, &#x27;
 &#x27;line 842, in get_db_prep_save\n&#x27;
 &#x27;    return self.get_db_prep_value(value, connection=connection, &#x27;
 &#x27;prepared=False)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, &#x27;
 &#x27;line 2486, in get_db_prep_value\n&#x27;
 &#x27;    value = self.get_prep_value(value)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, &#x27;
 &#x27;line 1825, in get_prep_value\n&#x27;
 &#x27;    raise e.__class__(\n&#x27;
 &quot;TypeError: Field &#x27;id&#x27; expected a number but got &lt;Stock: Microsoft &quot;
 &#x27;Corporation (MSFT)&gt;.\n&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>validated_data</td>
                    <td class="code"><pre>{&#x27;portfolio&#x27;: &lt;Portfolio: Portfolio of test - 2&gt;,
 &#x27;quantity&#x27;: 5,
 &#x27;stock_id&#x27;: &lt;Stock: Microsoft Corporation (MSFT)&gt;}</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/db/models/manager.py</code>, line 85, in manager_method
          

          
            <div class="context" id="c281473509815232">
              
                <ol start="78" class="pre-context" id="pre281473509815232">
                
                  <li onclick="toggle('pre281473509815232', 'post281473509815232')"><pre>    def check(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre281473509815232', 'post281473509815232')"><pre>        return []</pre></li>
                
                  <li onclick="toggle('pre281473509815232', 'post281473509815232')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473509815232', 'post281473509815232')"><pre>    @classmethod</pre></li>
                
                  <li onclick="toggle('pre281473509815232', 'post281473509815232')"><pre>    def _get_queryset_methods(cls, queryset_class):</pre></li>
                
                  <li onclick="toggle('pre281473509815232', 'post281473509815232')"><pre>        def create_method(name, method):</pre></li>
                
                  <li onclick="toggle('pre281473509815232', 'post281473509815232')"><pre>            def manager_method(self, *args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="85" class="context-line">
                <li onclick="toggle('pre281473509815232', 'post281473509815232')"><pre>                return getattr(self.get_queryset(), name)(*args, **kwargs)</pre> <span>…</span></li>
              </ol>
              
                <ol start='86' class="post-context" id="post281473509815232">
                  
                  <li onclick="toggle('pre281473509815232', 'post281473509815232')"><pre>            manager_method.__name__ = method.__name__</pre></li>
                  
                  <li onclick="toggle('pre281473509815232', 'post281473509815232')"><pre>            manager_method.__doc__ = method.__doc__</pre></li>
                  
                  <li onclick="toggle('pre281473509815232', 'post281473509815232')"><pre>            return manager_method</pre></li>
                  
                  <li onclick="toggle('pre281473509815232', 'post281473509815232')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509815232', 'post281473509815232')"><pre>        new_methods = {}</pre></li>
                  
                  <li onclick="toggle('pre281473509815232', 'post281473509815232')"><pre>        for name, method in inspect.getmembers(queryset_class, predicate=inspect.isfunction):</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509815232')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509815232">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#x27;portfolio&#x27;: &lt;Portfolio: Portfolio of test - 2&gt;,
 &#x27;quantity&#x27;: 5,
 &#x27;stock_id&#x27;: &lt;Stock: Microsoft Corporation (MSFT)&gt;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>name</td>
                    <td class="code"><pre>&#x27;create&#x27;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0xffffa8b8c7c0&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/db/models/query.py</code>, line 453, in create
          

          
            <div class="context" id="c281473509815168">
              
                <ol start="446" class="pre-context" id="pre281473509815168">
                
                  <li onclick="toggle('pre281473509815168', 'post281473509815168')"><pre>    def create(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre281473509815168', 'post281473509815168')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre281473509815168', 'post281473509815168')"><pre>        Create a new object with the given kwargs, saving it to the database</pre></li>
                
                  <li onclick="toggle('pre281473509815168', 'post281473509815168')"><pre>        and returning the created object.</pre></li>
                
                  <li onclick="toggle('pre281473509815168', 'post281473509815168')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre281473509815168', 'post281473509815168')"><pre>        obj = self.model(**kwargs)</pre></li>
                
                  <li onclick="toggle('pre281473509815168', 'post281473509815168')"><pre>        self._for_write = True</pre></li>
                
                </ol>
              
              <ol start="453" class="context-line">
                <li onclick="toggle('pre281473509815168', 'post281473509815168')"><pre>        obj.save(force_insert=True, using=self.db)</pre> <span>…</span></li>
              </ol>
              
                <ol start='454' class="post-context" id="post281473509815168">
                  
                  <li onclick="toggle('pre281473509815168', 'post281473509815168')"><pre>        return obj</pre></li>
                  
                  <li onclick="toggle('pre281473509815168', 'post281473509815168')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509815168', 'post281473509815168')"><pre>    def _prepare_for_bulk_create(self, objs):</pre></li>
                  
                  <li onclick="toggle('pre281473509815168', 'post281473509815168')"><pre>        for obj in objs:</pre></li>
                  
                  <li onclick="toggle('pre281473509815168', 'post281473509815168')"><pre>            if obj.pk is None:</pre></li>
                  
                  <li onclick="toggle('pre281473509815168', 'post281473509815168')"><pre>                # Populate new PK values.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509815168')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509815168">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#x27;portfolio&#x27;: &lt;Portfolio: Portfolio of test - 2&gt;,
 &#x27;quantity&#x27;: 5,
 &#x27;stock_id&#x27;: &lt;Stock: Microsoft Corporation (MSFT)&gt;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>obj</td>
                    <td class="code"><pre>&lt;PortfolioStock: PortfolioStock object (None)&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;PortfolioStock: PortfolioStock object (1)&gt;]&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/db/models/base.py</code>, line 726, in save
          

          
            <div class="context" id="c281473509106240">
              
                <ol start="719" class="pre-context" id="pre281473509106240">
                
                  <li onclick="toggle('pre281473509106240', 'post281473509106240')"><pre>            for field in self._meta.concrete_fields:</pre></li>
                
                  <li onclick="toggle('pre281473509106240', 'post281473509106240')"><pre>                if not field.primary_key and not hasattr(field, &#x27;through&#x27;):</pre></li>
                
                  <li onclick="toggle('pre281473509106240', 'post281473509106240')"><pre>                    field_names.add(field.attname)</pre></li>
                
                  <li onclick="toggle('pre281473509106240', 'post281473509106240')"><pre>            loaded_fields = field_names.difference(deferred_fields)</pre></li>
                
                  <li onclick="toggle('pre281473509106240', 'post281473509106240')"><pre>            if loaded_fields:</pre></li>
                
                  <li onclick="toggle('pre281473509106240', 'post281473509106240')"><pre>                update_fields = frozenset(loaded_fields)</pre></li>
                
                  <li onclick="toggle('pre281473509106240', 'post281473509106240')"><pre></pre></li>
                
                </ol>
              
              <ol start="726" class="context-line">
                <li onclick="toggle('pre281473509106240', 'post281473509106240')"><pre>        self.save_base(using=using, force_insert=force_insert,</pre> <span>…</span></li>
              </ol>
              
                <ol start='727' class="post-context" id="post281473509106240">
                  
                  <li onclick="toggle('pre281473509106240', 'post281473509106240')"><pre>                       force_update=force_update, update_fields=update_fields)</pre></li>
                  
                  <li onclick="toggle('pre281473509106240', 'post281473509106240')"><pre>    save.alters_data = True</pre></li>
                  
                  <li onclick="toggle('pre281473509106240', 'post281473509106240')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509106240', 'post281473509106240')"><pre>    def save_base(self, raw=False, force_insert=False,</pre></li>
                  
                  <li onclick="toggle('pre281473509106240', 'post281473509106240')"><pre>                  force_update=False, using=None, update_fields=None):</pre></li>
                  
                  <li onclick="toggle('pre281473509106240', 'post281473509106240')"><pre>        &quot;&quot;&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509106240')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509106240">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>deferred_fields</td>
                    <td class="code"><pre>set()</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;PortfolioStock: PortfolioStock object (None)&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#x27;default&#x27;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/db/models/base.py</code>, line 763, in save_base
          

          
            <div class="context" id="c281473509829440">
              
                <ol start="756" class="pre-context" id="pre281473509829440">
                
                  <li onclick="toggle('pre281473509829440', 'post281473509829440')"><pre>            context_manager = transaction.atomic(using=using, savepoint=False)</pre></li>
                
                  <li onclick="toggle('pre281473509829440', 'post281473509829440')"><pre>        else:</pre></li>
                
                  <li onclick="toggle('pre281473509829440', 'post281473509829440')"><pre>            context_manager = transaction.mark_for_rollback_on_error(using=using)</pre></li>
                
                  <li onclick="toggle('pre281473509829440', 'post281473509829440')"><pre>        with context_manager:</pre></li>
                
                  <li onclick="toggle('pre281473509829440', 'post281473509829440')"><pre>            parent_inserted = False</pre></li>
                
                  <li onclick="toggle('pre281473509829440', 'post281473509829440')"><pre>            if not raw:</pre></li>
                
                  <li onclick="toggle('pre281473509829440', 'post281473509829440')"><pre>                parent_inserted = self._save_parents(cls, using, update_fields)</pre></li>
                
                </ol>
              
              <ol start="763" class="context-line">
                <li onclick="toggle('pre281473509829440', 'post281473509829440')"><pre>            updated = self._save_table(</pre> <span>…</span></li>
              </ol>
              
                <ol start='764' class="post-context" id="post281473509829440">
                  
                  <li onclick="toggle('pre281473509829440', 'post281473509829440')"><pre>                raw, cls, force_insert or parent_inserted,</pre></li>
                  
                  <li onclick="toggle('pre281473509829440', 'post281473509829440')"><pre>                force_update, using, update_fields,</pre></li>
                  
                  <li onclick="toggle('pre281473509829440', 'post281473509829440')"><pre>            )</pre></li>
                  
                  <li onclick="toggle('pre281473509829440', 'post281473509829440')"><pre>        # Store the database on which the object was saved</pre></li>
                  
                  <li onclick="toggle('pre281473509829440', 'post281473509829440')"><pre>        self._state.db = using</pre></li>
                  
                  <li onclick="toggle('pre281473509829440', 'post281473509829440')"><pre>        # Once saved, this is no longer a to-be-added instance.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509829440')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509829440">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#x27;portfolio.models.PortfolioStock&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>context_manager</td>
                    <td class="code"><pre>&lt;contextlib._GeneratorContextManager object at 0xffffa88bca00&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>meta</td>
                    <td class="code"><pre>&lt;Options for PortfolioStock&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>origin</td>
                    <td class="code"><pre>&lt;class &#x27;portfolio.models.PortfolioStock&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>parent_inserted</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;PortfolioStock: PortfolioStock object (None)&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#x27;default&#x27;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/db/models/base.py</code>, line 868, in _save_table
          

          
            <div class="context" id="c281473509830336">
              
                <ol start="861" class="pre-context" id="pre281473509830336">
                
                  <li onclick="toggle('pre281473509830336', 'post281473509830336')"><pre>                    ),</pre></li>
                
                  <li onclick="toggle('pre281473509830336', 'post281473509830336')"><pre>                )[&#x27;_order__max&#x27;]</pre></li>
                
                  <li onclick="toggle('pre281473509830336', 'post281473509830336')"><pre>            fields = meta.local_concrete_fields</pre></li>
                
                  <li onclick="toggle('pre281473509830336', 'post281473509830336')"><pre>            if not pk_set:</pre></li>
                
                  <li onclick="toggle('pre281473509830336', 'post281473509830336')"><pre>                fields = [f for f in fields if f is not meta.auto_field]</pre></li>
                
                  <li onclick="toggle('pre281473509830336', 'post281473509830336')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473509830336', 'post281473509830336')"><pre>            returning_fields = meta.db_returning_fields</pre></li>
                
                </ol>
              
              <ol start="868" class="context-line">
                <li onclick="toggle('pre281473509830336', 'post281473509830336')"><pre>            results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)</pre> <span>…</span></li>
              </ol>
              
                <ol start='869' class="post-context" id="post281473509830336">
                  
                  <li onclick="toggle('pre281473509830336', 'post281473509830336')"><pre>            if results:</pre></li>
                  
                  <li onclick="toggle('pre281473509830336', 'post281473509830336')"><pre>                for value, field in zip(results[0], returning_fields):</pre></li>
                  
                  <li onclick="toggle('pre281473509830336', 'post281473509830336')"><pre>                    setattr(self, field.attname, value)</pre></li>
                  
                  <li onclick="toggle('pre281473509830336', 'post281473509830336')"><pre>        return updated</pre></li>
                  
                  <li onclick="toggle('pre281473509830336', 'post281473509830336')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509830336', 'post281473509830336')"><pre>    def _do_update(self, base_qs, using, pk_val, values, update_fields, forced_update):</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509830336')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509830336">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#x27;portfolio.models.PortfolioStock&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.related.ForeignKey: portfolio&gt;,
 &lt;django.db.models.fields.related.ForeignKey: stock&gt;,
 &lt;django.db.models.fields.IntegerField: quantity&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>meta</td>
                    <td class="code"><pre>&lt;Options for PortfolioStock&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>non_pks</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.related.ForeignKey: portfolio&gt;,
 &lt;django.db.models.fields.related.ForeignKey: stock&gt;,
 &lt;django.db.models.fields.IntegerField: quantity&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>pk_set</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>pk_val</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>returning_fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.BigAutoField: id&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;PortfolioStock: PortfolioStock object (None)&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>updated</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#x27;default&#x27;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/db/models/base.py</code>, line 906, in _do_insert
          

          
            <div class="context" id="c281473509787328">
              
                <ol start="899" class="pre-context" id="pre281473509787328">
                
                  <li onclick="toggle('pre281473509787328', 'post281473509787328')"><pre>        return filtered._update(values) &gt; 0</pre></li>
                
                  <li onclick="toggle('pre281473509787328', 'post281473509787328')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473509787328', 'post281473509787328')"><pre>    def _do_insert(self, manager, using, fields, returning_fields, raw):</pre></li>
                
                  <li onclick="toggle('pre281473509787328', 'post281473509787328')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre281473509787328', 'post281473509787328')"><pre>        Do an INSERT. If returning_fields is defined then this method should</pre></li>
                
                  <li onclick="toggle('pre281473509787328', 'post281473509787328')"><pre>        return the newly created data for the model.</pre></li>
                
                  <li onclick="toggle('pre281473509787328', 'post281473509787328')"><pre>        &quot;&quot;&quot;</pre></li>
                
                </ol>
              
              <ol start="906" class="context-line">
                <li onclick="toggle('pre281473509787328', 'post281473509787328')"><pre>        return manager._insert(</pre> <span>…</span></li>
              </ol>
              
                <ol start='907' class="post-context" id="post281473509787328">
                  
                  <li onclick="toggle('pre281473509787328', 'post281473509787328')"><pre>            [self], fields=fields, returning_fields=returning_fields,</pre></li>
                  
                  <li onclick="toggle('pre281473509787328', 'post281473509787328')"><pre>            using=using, raw=raw,</pre></li>
                  
                  <li onclick="toggle('pre281473509787328', 'post281473509787328')"><pre>        )</pre></li>
                  
                  <li onclick="toggle('pre281473509787328', 'post281473509787328')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509787328', 'post281473509787328')"><pre>    def _prepare_related_fields_for_save(self, operation_name):</pre></li>
                  
                  <li onclick="toggle('pre281473509787328', 'post281473509787328')"><pre>        # Ensure that a model instance without a PK hasn&#x27;t been assigned to</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509787328')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509787328">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.related.ForeignKey: portfolio&gt;,
 &lt;django.db.models.fields.related.ForeignKey: stock&gt;,
 &lt;django.db.models.fields.IntegerField: quantity&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>manager</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0xffffa88d78e0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>returning_fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.BigAutoField: id&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;PortfolioStock: PortfolioStock object (None)&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#x27;default&#x27;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/db/models/manager.py</code>, line 85, in manager_method
          

          
            <div class="context" id="c281473509787456">
              
                <ol start="78" class="pre-context" id="pre281473509787456">
                
                  <li onclick="toggle('pre281473509787456', 'post281473509787456')"><pre>    def check(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre281473509787456', 'post281473509787456')"><pre>        return []</pre></li>
                
                  <li onclick="toggle('pre281473509787456', 'post281473509787456')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473509787456', 'post281473509787456')"><pre>    @classmethod</pre></li>
                
                  <li onclick="toggle('pre281473509787456', 'post281473509787456')"><pre>    def _get_queryset_methods(cls, queryset_class):</pre></li>
                
                  <li onclick="toggle('pre281473509787456', 'post281473509787456')"><pre>        def create_method(name, method):</pre></li>
                
                  <li onclick="toggle('pre281473509787456', 'post281473509787456')"><pre>            def manager_method(self, *args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="85" class="context-line">
                <li onclick="toggle('pre281473509787456', 'post281473509787456')"><pre>                return getattr(self.get_queryset(), name)(*args, **kwargs)</pre> <span>…</span></li>
              </ol>
              
                <ol start='86' class="post-context" id="post281473509787456">
                  
                  <li onclick="toggle('pre281473509787456', 'post281473509787456')"><pre>            manager_method.__name__ = method.__name__</pre></li>
                  
                  <li onclick="toggle('pre281473509787456', 'post281473509787456')"><pre>            manager_method.__doc__ = method.__doc__</pre></li>
                  
                  <li onclick="toggle('pre281473509787456', 'post281473509787456')"><pre>            return manager_method</pre></li>
                  
                  <li onclick="toggle('pre281473509787456', 'post281473509787456')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509787456', 'post281473509787456')"><pre>        new_methods = {}</pre></li>
                  
                  <li onclick="toggle('pre281473509787456', 'post281473509787456')"><pre>        for name, method in inspect.getmembers(queryset_class, predicate=inspect.isfunction):</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509787456')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509787456">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>([&lt;PortfolioStock: PortfolioStock object (None)&gt;],)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#x27;fields&#x27;: [&lt;django.db.models.fields.related.ForeignKey: portfolio&gt;,
            &lt;django.db.models.fields.related.ForeignKey: stock&gt;,
            &lt;django.db.models.fields.IntegerField: quantity&gt;],
 &#x27;raw&#x27;: False,
 &#x27;returning_fields&#x27;: [&lt;django.db.models.fields.BigAutoField: id&gt;],
 &#x27;using&#x27;: &#x27;default&#x27;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>name</td>
                    <td class="code"><pre>&#x27;_insert&#x27;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0xffffa88d78e0&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/db/models/query.py</code>, line 1270, in _insert
          

          
            <div class="context" id="c281473507010944">
              
                <ol start="1263" class="pre-context" id="pre281473507010944">
                
                  <li onclick="toggle('pre281473507010944', 'post281473507010944')"><pre>        the InsertQuery class and is how Model.save() is implemented.</pre></li>
                
                  <li onclick="toggle('pre281473507010944', 'post281473507010944')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre281473507010944', 'post281473507010944')"><pre>        self._for_write = True</pre></li>
                
                  <li onclick="toggle('pre281473507010944', 'post281473507010944')"><pre>        if using is None:</pre></li>
                
                  <li onclick="toggle('pre281473507010944', 'post281473507010944')"><pre>            using = self.db</pre></li>
                
                  <li onclick="toggle('pre281473507010944', 'post281473507010944')"><pre>        query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)</pre></li>
                
                  <li onclick="toggle('pre281473507010944', 'post281473507010944')"><pre>        query.insert_values(fields, objs, raw=raw)</pre></li>
                
                </ol>
              
              <ol start="1270" class="context-line">
                <li onclick="toggle('pre281473507010944', 'post281473507010944')"><pre>        return query.get_compiler(using=using).execute_sql(returning_fields)</pre> <span>…</span></li>
              </ol>
              
                <ol start='1271' class="post-context" id="post281473507010944">
                  
                  <li onclick="toggle('pre281473507010944', 'post281473507010944')"><pre>    _insert.alters_data = True</pre></li>
                  
                  <li onclick="toggle('pre281473507010944', 'post281473507010944')"><pre>    _insert.queryset_only = False</pre></li>
                  
                  <li onclick="toggle('pre281473507010944', 'post281473507010944')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473507010944', 'post281473507010944')"><pre>    def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):</pre></li>
                  
                  <li onclick="toggle('pre281473507010944', 'post281473507010944')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre281473507010944', 'post281473507010944')"><pre>        Helper method for bulk_create() to insert objs one batch at a time.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473507010944')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473507010944">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.related.ForeignKey: portfolio&gt;,
 &lt;django.db.models.fields.related.ForeignKey: stock&gt;,
 &lt;django.db.models.fields.IntegerField: quantity&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>ignore_conflicts</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>objs</td>
                    <td class="code"><pre>[&lt;PortfolioStock: PortfolioStock object (None)&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>&lt;django.db.models.sql.subqueries.InsertQuery object at 0xffffa88d5670&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>returning_fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.BigAutoField: id&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;QuerySet [&lt;PortfolioStock: PortfolioStock object (1)&gt;]&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#x27;default&#x27;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py</code>, line 1415, in execute_sql
          

          
            <div class="context" id="c281473509829824">
              
                <ol start="1408" class="pre-context" id="pre281473509829824">
                
                  <li onclick="toggle('pre281473509829824', 'post281473509829824')"><pre>    def execute_sql(self, returning_fields=None):</pre></li>
                
                  <li onclick="toggle('pre281473509829824', 'post281473509829824')"><pre>        assert not (</pre></li>
                
                  <li onclick="toggle('pre281473509829824', 'post281473509829824')"><pre>            returning_fields and len(self.query.objs) != 1 and</pre></li>
                
                  <li onclick="toggle('pre281473509829824', 'post281473509829824')"><pre>            not self.connection.features.can_return_rows_from_bulk_insert</pre></li>
                
                  <li onclick="toggle('pre281473509829824', 'post281473509829824')"><pre>        )</pre></li>
                
                  <li onclick="toggle('pre281473509829824', 'post281473509829824')"><pre>        self.returning_fields = returning_fields</pre></li>
                
                  <li onclick="toggle('pre281473509829824', 'post281473509829824')"><pre>        with self.connection.cursor() as cursor:</pre></li>
                
                </ol>
              
              <ol start="1415" class="context-line">
                <li onclick="toggle('pre281473509829824', 'post281473509829824')"><pre>            for sql, params in self.as_sql():</pre> <span>…</span></li>
              </ol>
              
                <ol start='1416' class="post-context" id="post281473509829824">
                  
                  <li onclick="toggle('pre281473509829824', 'post281473509829824')"><pre>                cursor.execute(sql, params)</pre></li>
                  
                  <li onclick="toggle('pre281473509829824', 'post281473509829824')"><pre>            if not self.returning_fields:</pre></li>
                  
                  <li onclick="toggle('pre281473509829824', 'post281473509829824')"><pre>                return []</pre></li>
                  
                  <li onclick="toggle('pre281473509829824', 'post281473509829824')"><pre>            if self.connection.features.can_return_rows_from_bulk_insert and len(self.query.objs) &gt; 1:</pre></li>
                  
                  <li onclick="toggle('pre281473509829824', 'post281473509829824')"><pre>                return self.connection.ops.fetch_returned_insert_rows(cursor)</pre></li>
                  
                  <li onclick="toggle('pre281473509829824', 'post281473509829824')"><pre>            if self.connection.features.can_return_columns_from_insert:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509829824')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509829824">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cursor</td>
                    <td class="code"><pre>&lt;django.db.backends.postgresql.base.CursorDebugWrapper object at 0xffffa88e84f0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>returning_fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.BigAutoField: id&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.sql.compiler.SQLInsertCompiler object at 0xffffa88e8d30&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py</code>, line 1358, in as_sql
          

          
            <div class="context" id="c281473509829568">
              
                <ol start="1351" class="pre-context" id="pre281473509829568">
                
                  <li onclick="toggle('pre281473509829568', 'post281473509829568')"><pre>        opts = self.query.get_meta()</pre></li>
                
                  <li onclick="toggle('pre281473509829568', 'post281473509829568')"><pre>        insert_statement = self.connection.ops.insert_statement(ignore_conflicts=self.query.ignore_conflicts)</pre></li>
                
                  <li onclick="toggle('pre281473509829568', 'post281473509829568')"><pre>        result = [&#x27;%s %s&#x27; % (insert_statement, qn(opts.db_table))]</pre></li>
                
                  <li onclick="toggle('pre281473509829568', 'post281473509829568')"><pre>        fields = self.query.fields or [opts.pk]</pre></li>
                
                  <li onclick="toggle('pre281473509829568', 'post281473509829568')"><pre>        result.append(&#x27;(%s)&#x27; % &#x27;, &#x27;.join(qn(f.column) for f in fields))</pre></li>
                
                  <li onclick="toggle('pre281473509829568', 'post281473509829568')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473509829568', 'post281473509829568')"><pre>        if self.query.fields:</pre></li>
                
                </ol>
              
              <ol start="1358" class="context-line">
                <li onclick="toggle('pre281473509829568', 'post281473509829568')"><pre>            value_rows = [</pre> <span>…</span></li>
              </ol>
              
                <ol start='1359' class="post-context" id="post281473509829568">
                  
                  <li onclick="toggle('pre281473509829568', 'post281473509829568')"><pre>                [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]</pre></li>
                  
                  <li onclick="toggle('pre281473509829568', 'post281473509829568')"><pre>                for obj in self.query.objs</pre></li>
                  
                  <li onclick="toggle('pre281473509829568', 'post281473509829568')"><pre>            ]</pre></li>
                  
                  <li onclick="toggle('pre281473509829568', 'post281473509829568')"><pre>        else:</pre></li>
                  
                  <li onclick="toggle('pre281473509829568', 'post281473509829568')"><pre>            # An empty object.</pre></li>
                  
                  <li onclick="toggle('pre281473509829568', 'post281473509829568')"><pre>            value_rows = [[self.connection.ops.pk_default_value()] for _ in self.query.objs]</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509829568')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509829568">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.related.ForeignKey: portfolio&gt;,
 &lt;django.db.models.fields.related.ForeignKey: stock&gt;,
 &lt;django.db.models.fields.IntegerField: quantity&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>insert_statement</td>
                    <td class="code"><pre>&#x27;INSERT INTO&#x27;</pre></td>
                  </tr>
                
                  <tr>
                    <td>opts</td>
                    <td class="code"><pre>&lt;Options for PortfolioStock&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>qn</td>
                    <td class="code"><pre>&lt;bound method DatabaseOperations.quote_name of &lt;django.db.backends.postgresql.operations.DatabaseOperations object at 0xffffa88c2c70&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>result</td>
                    <td class="code"><pre>[&#x27;INSERT INTO &quot;portfolio_portfoliostock&quot;&#x27;,
 &#x27;(&quot;portfolio_id&quot;, &quot;stock_id&quot;, &quot;quantity&quot;)&#x27;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.sql.compiler.SQLInsertCompiler object at 0xffffa88e8d30&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py</code>, line 1359, in &lt;listcomp&gt;
          

          
            <div class="context" id="c281473507011520">
              
                <ol start="1352" class="pre-context" id="pre281473507011520">
                
                  <li onclick="toggle('pre281473507011520', 'post281473507011520')"><pre>        insert_statement = self.connection.ops.insert_statement(ignore_conflicts=self.query.ignore_conflicts)</pre></li>
                
                  <li onclick="toggle('pre281473507011520', 'post281473507011520')"><pre>        result = [&#x27;%s %s&#x27; % (insert_statement, qn(opts.db_table))]</pre></li>
                
                  <li onclick="toggle('pre281473507011520', 'post281473507011520')"><pre>        fields = self.query.fields or [opts.pk]</pre></li>
                
                  <li onclick="toggle('pre281473507011520', 'post281473507011520')"><pre>        result.append(&#x27;(%s)&#x27; % &#x27;, &#x27;.join(qn(f.column) for f in fields))</pre></li>
                
                  <li onclick="toggle('pre281473507011520', 'post281473507011520')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473507011520', 'post281473507011520')"><pre>        if self.query.fields:</pre></li>
                
                  <li onclick="toggle('pre281473507011520', 'post281473507011520')"><pre>            value_rows = [</pre></li>
                
                </ol>
              
              <ol start="1359" class="context-line">
                <li onclick="toggle('pre281473507011520', 'post281473507011520')"><pre>                [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]</pre> <span>…</span></li>
              </ol>
              
                <ol start='1360' class="post-context" id="post281473507011520">
                  
                  <li onclick="toggle('pre281473507011520', 'post281473507011520')"><pre>                for obj in self.query.objs</pre></li>
                  
                  <li onclick="toggle('pre281473507011520', 'post281473507011520')"><pre>            ]</pre></li>
                  
                  <li onclick="toggle('pre281473507011520', 'post281473507011520')"><pre>        else:</pre></li>
                  
                  <li onclick="toggle('pre281473507011520', 'post281473507011520')"><pre>            # An empty object.</pre></li>
                  
                  <li onclick="toggle('pre281473507011520', 'post281473507011520')"><pre>            value_rows = [[self.connection.ops.pk_default_value()] for _ in self.query.objs]</pre></li>
                  
                  <li onclick="toggle('pre281473507011520', 'post281473507011520')"><pre>            fields = [None]</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473507011520')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473507011520">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>.0</td>
                    <td class="code"><pre>&lt;list_iterator object at 0xffffa88e8df0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>[&lt;django.db.models.fields.related.ForeignKey: portfolio&gt;,
 &lt;django.db.models.fields.related.ForeignKey: stock&gt;,
 &lt;django.db.models.fields.IntegerField: quantity&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>obj</td>
                    <td class="code"><pre>&lt;PortfolioStock: PortfolioStock object (None)&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.sql.compiler.SQLInsertCompiler object at 0xffffa88e8d30&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py</code>, line 1359, in &lt;listcomp&gt;
          

          
            <div class="context" id="c281473507010688">
              
                <ol start="1352" class="pre-context" id="pre281473507010688">
                
                  <li onclick="toggle('pre281473507010688', 'post281473507010688')"><pre>        insert_statement = self.connection.ops.insert_statement(ignore_conflicts=self.query.ignore_conflicts)</pre></li>
                
                  <li onclick="toggle('pre281473507010688', 'post281473507010688')"><pre>        result = [&#x27;%s %s&#x27; % (insert_statement, qn(opts.db_table))]</pre></li>
                
                  <li onclick="toggle('pre281473507010688', 'post281473507010688')"><pre>        fields = self.query.fields or [opts.pk]</pre></li>
                
                  <li onclick="toggle('pre281473507010688', 'post281473507010688')"><pre>        result.append(&#x27;(%s)&#x27; % &#x27;, &#x27;.join(qn(f.column) for f in fields))</pre></li>
                
                  <li onclick="toggle('pre281473507010688', 'post281473507010688')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473507010688', 'post281473507010688')"><pre>        if self.query.fields:</pre></li>
                
                  <li onclick="toggle('pre281473507010688', 'post281473507010688')"><pre>            value_rows = [</pre></li>
                
                </ol>
              
              <ol start="1359" class="context-line">
                <li onclick="toggle('pre281473507010688', 'post281473507010688')"><pre>                [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]</pre> <span>…</span></li>
              </ol>
              
                <ol start='1360' class="post-context" id="post281473507010688">
                  
                  <li onclick="toggle('pre281473507010688', 'post281473507010688')"><pre>                for obj in self.query.objs</pre></li>
                  
                  <li onclick="toggle('pre281473507010688', 'post281473507010688')"><pre>            ]</pre></li>
                  
                  <li onclick="toggle('pre281473507010688', 'post281473507010688')"><pre>        else:</pre></li>
                  
                  <li onclick="toggle('pre281473507010688', 'post281473507010688')"><pre>            # An empty object.</pre></li>
                  
                  <li onclick="toggle('pre281473507010688', 'post281473507010688')"><pre>            value_rows = [[self.connection.ops.pk_default_value()] for _ in self.query.objs]</pre></li>
                  
                  <li onclick="toggle('pre281473507010688', 'post281473507010688')"><pre>            fields = [None]</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473507010688')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473507010688">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>.0</td>
                    <td class="code"><pre>&lt;list_iterator object at 0xffffa88e8850&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>field</td>
                    <td class="code"><pre>&lt;django.db.models.fields.related.ForeignKey: stock&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>obj</td>
                    <td class="code"><pre>&lt;PortfolioStock: PortfolioStock object (None)&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.sql.compiler.SQLInsertCompiler object at 0xffffa88e8d30&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py</code>, line 1300, in prepare_value
          

          
            <div class="context" id="c281473507012224">
              
                <ol start="1293" class="pre-context" id="pre281473507012224">
                
                  <li onclick="toggle('pre281473507012224', 'post281473507012224')"><pre>                )</pre></li>
                
                  <li onclick="toggle('pre281473507012224', 'post281473507012224')"><pre>            if value.contains_over_clause:</pre></li>
                
                  <li onclick="toggle('pre281473507012224', 'post281473507012224')"><pre>                raise FieldError(</pre></li>
                
                  <li onclick="toggle('pre281473507012224', 'post281473507012224')"><pre>                    &#x27;Window expressions are not allowed in this query (%s=%r).&#x27;</pre></li>
                
                  <li onclick="toggle('pre281473507012224', 'post281473507012224')"><pre>                    % (field.name, value)</pre></li>
                
                  <li onclick="toggle('pre281473507012224', 'post281473507012224')"><pre>                )</pre></li>
                
                  <li onclick="toggle('pre281473507012224', 'post281473507012224')"><pre>        else:</pre></li>
                
                </ol>
              
              <ol start="1300" class="context-line">
                <li onclick="toggle('pre281473507012224', 'post281473507012224')"><pre>            value = field.get_db_prep_save(value, connection=self.connection)</pre> <span>…</span></li>
              </ol>
              
                <ol start='1301' class="post-context" id="post281473507012224">
                  
                  <li onclick="toggle('pre281473507012224', 'post281473507012224')"><pre>        return value</pre></li>
                  
                  <li onclick="toggle('pre281473507012224', 'post281473507012224')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473507012224', 'post281473507012224')"><pre>    def pre_save_val(self, field, obj):</pre></li>
                  
                  <li onclick="toggle('pre281473507012224', 'post281473507012224')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre281473507012224', 'post281473507012224')"><pre>        Get the given field&#x27;s value off the given obj. pre_save() is used for</pre></li>
                  
                  <li onclick="toggle('pre281473507012224', 'post281473507012224')"><pre>        things like auto_now on DateTimeField. Skip it if this is a raw query.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473507012224')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473507012224">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>field</td>
                    <td class="code"><pre>&lt;django.db.models.fields.related.ForeignKey: stock&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.sql.compiler.SQLInsertCompiler object at 0xffffa88e8d30&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>value</td>
                    <td class="code"><pre>&lt;Stock: Microsoft Corporation (MSFT)&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/db/models/fields/related.py</code>, line 971, in get_db_prep_save
          

          
            <div class="context" id="c281473507012416">
              
                <ol start="964" class="pre-context" id="pre281473507012416">
                
                  <li onclick="toggle('pre281473507012416', 'post281473507012416')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473507012416', 'post281473507012416')"><pre>    def get_db_prep_save(self, value, connection):</pre></li>
                
                  <li onclick="toggle('pre281473507012416', 'post281473507012416')"><pre>        if value is None or (value == &#x27;&#x27; and</pre></li>
                
                  <li onclick="toggle('pre281473507012416', 'post281473507012416')"><pre>                             (not self.target_field.empty_strings_allowed or</pre></li>
                
                  <li onclick="toggle('pre281473507012416', 'post281473507012416')"><pre>                              connection.features.interprets_empty_strings_as_nulls)):</pre></li>
                
                  <li onclick="toggle('pre281473507012416', 'post281473507012416')"><pre>            return None</pre></li>
                
                  <li onclick="toggle('pre281473507012416', 'post281473507012416')"><pre>        else:</pre></li>
                
                </ol>
              
              <ol start="971" class="context-line">
                <li onclick="toggle('pre281473507012416', 'post281473507012416')"><pre>            return self.target_field.get_db_prep_save(value, connection=connection)</pre> <span>…</span></li>
              </ol>
              
                <ol start='972' class="post-context" id="post281473507012416">
                  
                  <li onclick="toggle('pre281473507012416', 'post281473507012416')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473507012416', 'post281473507012416')"><pre>    def get_db_prep_value(self, value, connection, prepared=False):</pre></li>
                  
                  <li onclick="toggle('pre281473507012416', 'post281473507012416')"><pre>        return self.target_field.get_db_prep_value(value, connection, prepared)</pre></li>
                  
                  <li onclick="toggle('pre281473507012416', 'post281473507012416')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473507012416', 'post281473507012416')"><pre>    def get_prep_value(self, value):</pre></li>
                  
                  <li onclick="toggle('pre281473507012416', 'post281473507012416')"><pre>        return self.target_field.get_prep_value(value)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473507012416')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473507012416">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>connection</td>
                    <td class="code"><pre>&lt;django.db.backends.postgresql.base.DatabaseWrapper object at 0xffffa88c2ca0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.fields.related.ForeignKey: stock&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>value</td>
                    <td class="code"><pre>&lt;Stock: Microsoft Corporation (MSFT)&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py</code>, line 842, in get_db_prep_save
          

          
            <div class="context" id="c281473507010752">
              
                <ol start="835" class="pre-context" id="pre281473507010752">
                
                  <li onclick="toggle('pre281473507010752', 'post281473507010752')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre281473507010752', 'post281473507010752')"><pre>        if not prepared:</pre></li>
                
                  <li onclick="toggle('pre281473507010752', 'post281473507010752')"><pre>            value = self.get_prep_value(value)</pre></li>
                
                  <li onclick="toggle('pre281473507010752', 'post281473507010752')"><pre>        return value</pre></li>
                
                  <li onclick="toggle('pre281473507010752', 'post281473507010752')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473507010752', 'post281473507010752')"><pre>    def get_db_prep_save(self, value, connection):</pre></li>
                
                  <li onclick="toggle('pre281473507010752', 'post281473507010752')"><pre>        &quot;&quot;&quot;Return field&#x27;s value prepared for saving into a database.&quot;&quot;&quot;</pre></li>
                
                </ol>
              
              <ol start="842" class="context-line">
                <li onclick="toggle('pre281473507010752', 'post281473507010752')"><pre>        return self.get_db_prep_value(value, connection=connection, prepared=False)</pre> <span>…</span></li>
              </ol>
              
                <ol start='843' class="post-context" id="post281473507010752">
                  
                  <li onclick="toggle('pre281473507010752', 'post281473507010752')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473507010752', 'post281473507010752')"><pre>    def has_default(self):</pre></li>
                  
                  <li onclick="toggle('pre281473507010752', 'post281473507010752')"><pre>        &quot;&quot;&quot;Return a boolean of whether this field has a default value.&quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre281473507010752', 'post281473507010752')"><pre>        return self.default is not NOT_PROVIDED</pre></li>
                  
                  <li onclick="toggle('pre281473507010752', 'post281473507010752')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473507010752', 'post281473507010752')"><pre>    def get_default(self):</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473507010752')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473507010752">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>connection</td>
                    <td class="code"><pre>&lt;django.db.backends.postgresql.base.DatabaseWrapper object at 0xffffa88c2ca0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.fields.BigAutoField: id&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>value</td>
                    <td class="code"><pre>&lt;Stock: Microsoft Corporation (MSFT)&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py</code>, line 2486, in get_db_prep_value
          

          
            <div class="context" id="c281473507011200">
              
                <ol start="2479" class="pre-context" id="pre281473507011200">
                
                  <li onclick="toggle('pre281473507011200', 'post281473507011200')"><pre>        return name, path, args, kwargs</pre></li>
                
                  <li onclick="toggle('pre281473507011200', 'post281473507011200')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473507011200', 'post281473507011200')"><pre>    def validate(self, value, model_instance):</pre></li>
                
                  <li onclick="toggle('pre281473507011200', 'post281473507011200')"><pre>        pass</pre></li>
                
                  <li onclick="toggle('pre281473507011200', 'post281473507011200')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473507011200', 'post281473507011200')"><pre>    def get_db_prep_value(self, value, connection, prepared=False):</pre></li>
                
                  <li onclick="toggle('pre281473507011200', 'post281473507011200')"><pre>        if not prepared:</pre></li>
                
                </ol>
              
              <ol start="2486" class="context-line">
                <li onclick="toggle('pre281473507011200', 'post281473507011200')"><pre>            value = self.get_prep_value(value)</pre> <span>…</span></li>
              </ol>
              
                <ol start='2487' class="post-context" id="post281473507011200">
                  
                  <li onclick="toggle('pre281473507011200', 'post281473507011200')"><pre>            value = connection.ops.validate_autopk_value(value)</pre></li>
                  
                  <li onclick="toggle('pre281473507011200', 'post281473507011200')"><pre>        return value</pre></li>
                  
                  <li onclick="toggle('pre281473507011200', 'post281473507011200')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473507011200', 'post281473507011200')"><pre>    def contribute_to_class(self, cls, name, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre281473507011200', 'post281473507011200')"><pre>        assert not cls._meta.auto_field, (</pre></li>
                  
                  <li onclick="toggle('pre281473507011200', 'post281473507011200')"><pre>            &quot;Model %s can&#x27;t have more than one auto-generated field.&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473507011200')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473507011200">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>connection</td>
                    <td class="code"><pre>&lt;django.db.backends.postgresql.base.DatabaseWrapper object at 0xffffa88c2ca0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>prepared</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.fields.BigAutoField: id&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>value</td>
                    <td class="code"><pre>&lt;Stock: Microsoft Corporation (MSFT)&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py</code>, line 1825, in get_prep_value
          

          
            <div class="context" id="c281473507010240">
              
                <ol start="1818" class="pre-context" id="pre281473507010240">
                
                  <li onclick="toggle('pre281473507010240', 'post281473507010240')"><pre>    def get_prep_value(self, value):</pre></li>
                
                  <li onclick="toggle('pre281473507010240', 'post281473507010240')"><pre>        value = super().get_prep_value(value)</pre></li>
                
                  <li onclick="toggle('pre281473507010240', 'post281473507010240')"><pre>        if value is None:</pre></li>
                
                  <li onclick="toggle('pre281473507010240', 'post281473507010240')"><pre>            return None</pre></li>
                
                  <li onclick="toggle('pre281473507010240', 'post281473507010240')"><pre>        try:</pre></li>
                
                  <li onclick="toggle('pre281473507010240', 'post281473507010240')"><pre>            return int(value)</pre></li>
                
                  <li onclick="toggle('pre281473507010240', 'post281473507010240')"><pre>        except (TypeError, ValueError) as e:</pre></li>
                
                </ol>
              
              <ol start="1825" class="context-line">
                <li onclick="toggle('pre281473507010240', 'post281473507010240')"><pre>            raise e.__class__(</pre> <span>…</span></li>
              </ol>
              
                <ol start='1826' class="post-context" id="post281473507010240">
                  
                  <li onclick="toggle('pre281473507010240', 'post281473507010240')"><pre>                &quot;Field &#x27;%s&#x27; expected a number but got %r.&quot; % (self.name, value),</pre></li>
                  
                  <li onclick="toggle('pre281473507010240', 'post281473507010240')"><pre>            ) from e</pre></li>
                  
                  <li onclick="toggle('pre281473507010240', 'post281473507010240')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473507010240', 'post281473507010240')"><pre>    def get_internal_type(self):</pre></li>
                  
                  <li onclick="toggle('pre281473507010240', 'post281473507010240')"><pre>        return &quot;IntegerField&quot;</pre></li>
                  
                  <li onclick="toggle('pre281473507010240', 'post281473507010240')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473507010240')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473507010240">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>__class__</td>
                    <td class="code"><pre>&lt;class &#x27;django.db.models.fields.IntegerField&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.fields.BigAutoField: id&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>value</td>
                    <td class="code"><pre>&lt;Stock: Microsoft Corporation (MSFT)&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
          <li><h3>
          
            During handling of the above exception (Field &#x27;id&#x27; expected a number but got &lt;Stock: Microsoft Corporation (MSFT)&gt;.), another exception occurred:
          
        </h3></li>
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/core/handlers/exception.py</code>, line 47, in inner
          

          
            <div class="context" id="c281473509830208">
              
                <ol start="40" class="pre-context" id="pre281473509830208">
                
                  <li onclick="toggle('pre281473509830208', 'post281473509830208')"><pre>                response = await sync_to_async(response_for_exception, thread_sensitive=False)(request, exc)</pre></li>
                
                  <li onclick="toggle('pre281473509830208', 'post281473509830208')"><pre>            return response</pre></li>
                
                  <li onclick="toggle('pre281473509830208', 'post281473509830208')"><pre>        return inner</pre></li>
                
                  <li onclick="toggle('pre281473509830208', 'post281473509830208')"><pre>    else:</pre></li>
                
                  <li onclick="toggle('pre281473509830208', 'post281473509830208')"><pre>        @wraps(get_response)</pre></li>
                
                  <li onclick="toggle('pre281473509830208', 'post281473509830208')"><pre>        def inner(request):</pre></li>
                
                  <li onclick="toggle('pre281473509830208', 'post281473509830208')"><pre>            try:</pre></li>
                
                </ol>
              
              <ol start="47" class="context-line">
                <li onclick="toggle('pre281473509830208', 'post281473509830208')"><pre>                response = get_response(request)</pre> <span>…</span></li>
              </ol>
              
                <ol start='48' class="post-context" id="post281473509830208">
                  
                  <li onclick="toggle('pre281473509830208', 'post281473509830208')"><pre>            except Exception as exc:</pre></li>
                  
                  <li onclick="toggle('pre281473509830208', 'post281473509830208')"><pre>                response = response_for_exception(request, exc)</pre></li>
                  
                  <li onclick="toggle('pre281473509830208', 'post281473509830208')"><pre>            return response</pre></li>
                  
                  <li onclick="toggle('pre281473509830208', 'post281473509830208')"><pre>        return inner</pre></li>
                  
                  <li onclick="toggle('pre281473509830208', 'post281473509830208')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509830208', 'post281473509830208')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509830208')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509830208">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>TypeError(&#x27;Got a `TypeError` when calling `PortfolioStock.objects.create()`. This may be because you have a writable field on the serializer class that is not a valid argument to `PortfolioStock.objects.create()`. You may need to make the field read-only, or override the PortfolioStockSerializer.create() method to handle this correctly.\nOriginal exception was:\n Traceback (most recent call last):\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 1823, in get_prep_value\n    return int(value)\nTypeError: int() argument must be a string, a bytes-like object or a number, not \&#x27;Stock\&#x27;\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File &quot;/usr/local/lib/python3.9/site-packages/rest_framework/serializers.py&quot;, line 939, in create\n    instance = ModelClass._default_manager.create(**validated_data)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, line 85, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, line 453, in create\n    obj.save(force_insert=True, using=self.db)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 726, in save\n    self.save_base(using=using, force_insert=force_insert,\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 763, in save_base\n    updated = self._save_table(\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 868, in _save_table\n    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 906, in _do_insert\n    return manager._insert(\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, line 85, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, line 1270, in _insert\n    return query.get_compiler(using=using).execute_sql(returning_fields)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1415, in execute_sql\n    for sql, params in self.as_sql():\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1358, in as_sql\n    value_rows = [\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1359, in &lt;listcomp&gt;\n    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1359, in &lt;listcomp&gt;\n    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1300, in prepare_value\n    value = field.get_db_prep_save(value, connection=self.connection)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/related.py&quot;, line 971, in get_db_prep_save\n    return self.target_field.get_db_prep_save(value, connection=connection)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 842, in get_db_prep_save\n    return self.get_db_prep_value(value, connection=connection, prepared=False)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 2486, in get_db_prep_value\n    value = self.get_prep_value(value)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 1825, in get_prep_value\n    raise e.__class__(\nTypeError: Field \&#x27;id\&#x27; expected a number but got &lt;Stock: Microsoft Corporation (MSFT)&gt;.\n&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>get_response</td>
                    <td class="code"><pre>&lt;bound method BaseHandler._get_response of &lt;django.core.handlers.wsgi.WSGIHandler object at 0xffffaa9e2f40&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#x27;/api/portfolios/1/add_stock/&#x27;&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/core/handlers/base.py</code>, line 181, in _get_response
          

          
            <div class="context" id="c281473509828032">
              
                <ol start="174" class="pre-context" id="pre281473509828032">
                
                  <li onclick="toggle('pre281473509828032', 'post281473509828032')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473509828032', 'post281473509828032')"><pre>        if response is None:</pre></li>
                
                  <li onclick="toggle('pre281473509828032', 'post281473509828032')"><pre>            wrapped_callback = self.make_view_atomic(callback)</pre></li>
                
                  <li onclick="toggle('pre281473509828032', 'post281473509828032')"><pre>            # If it is an asynchronous view, run it in a subthread.</pre></li>
                
                  <li onclick="toggle('pre281473509828032', 'post281473509828032')"><pre>            if asyncio.iscoroutinefunction(wrapped_callback):</pre></li>
                
                  <li onclick="toggle('pre281473509828032', 'post281473509828032')"><pre>                wrapped_callback = async_to_sync(wrapped_callback)</pre></li>
                
                  <li onclick="toggle('pre281473509828032', 'post281473509828032')"><pre>            try:</pre></li>
                
                </ol>
              
              <ol start="181" class="context-line">
                <li onclick="toggle('pre281473509828032', 'post281473509828032')"><pre>                response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre> <span>…</span></li>
              </ol>
              
                <ol start='182' class="post-context" id="post281473509828032">
                  
                  <li onclick="toggle('pre281473509828032', 'post281473509828032')"><pre>            except Exception as e:</pre></li>
                  
                  <li onclick="toggle('pre281473509828032', 'post281473509828032')"><pre>                response = self.process_exception_by_middleware(e, request)</pre></li>
                  
                  <li onclick="toggle('pre281473509828032', 'post281473509828032')"><pre>                if response is None:</pre></li>
                  
                  <li onclick="toggle('pre281473509828032', 'post281473509828032')"><pre>                    raise</pre></li>
                  
                  <li onclick="toggle('pre281473509828032', 'post281473509828032')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509828032', 'post281473509828032')"><pre>        # Complain if the view returned None (a common error).</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509828032')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509828032">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>callback</td>
                    <td class="code"><pre>&lt;function PortfolioStockCreate at 0xffffa8c093a0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_kwargs</td>
                    <td class="code"><pre>{&#x27;portfolio_id&#x27;: 1}</pre></td>
                  </tr>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method CsrfViewMiddleware.process_view of &lt;django.middleware.csrf.CsrfViewMiddleware object at 0xffffa8b53220&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#x27;/api/portfolios/1/add_stock/&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0xffffaa9e2f40&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>wrapped_callback</td>
                    <td class="code"><pre>&lt;function PortfolioStockCreate at 0xffffa8c093a0&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/views/decorators/csrf.py</code>, line 54, in wrapped_view
          

          
            <div class="context" id="c281473509828992">
              
                <ol start="47" class="pre-context" id="pre281473509828992">
                
                  <li onclick="toggle('pre281473509828992', 'post281473509828992')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473509828992', 'post281473509828992')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473509828992', 'post281473509828992')"><pre>def csrf_exempt(view_func):</pre></li>
                
                  <li onclick="toggle('pre281473509828992', 'post281473509828992')"><pre>    &quot;&quot;&quot;Mark a view function as being exempt from the CSRF view protection.&quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre281473509828992', 'post281473509828992')"><pre>    # view_func.csrf_exempt = True would also work, but decorators are nicer</pre></li>
                
                  <li onclick="toggle('pre281473509828992', 'post281473509828992')"><pre>    # if they don&#x27;t have side effects, so return a new function.</pre></li>
                
                  <li onclick="toggle('pre281473509828992', 'post281473509828992')"><pre>    def wrapped_view(*args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="54" class="context-line">
                <li onclick="toggle('pre281473509828992', 'post281473509828992')"><pre>        return view_func(*args, **kwargs)</pre> <span>…</span></li>
              </ol>
              
                <ol start='55' class="post-context" id="post281473509828992">
                  
                  <li onclick="toggle('pre281473509828992', 'post281473509828992')"><pre>    wrapped_view.csrf_exempt = True</pre></li>
                  
                  <li onclick="toggle('pre281473509828992', 'post281473509828992')"><pre>    return wraps(view_func)(wrapped_view)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509828992')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509828992">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(&lt;WSGIRequest: POST &#x27;/api/portfolios/1/add_stock/&#x27;&gt;,)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#x27;portfolio_id&#x27;: 1}</pre></td>
                  </tr>
                
                  <tr>
                    <td>view_func</td>
                    <td class="code"><pre>&lt;function PortfolioStockCreate at 0xffffa8c09310&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/django/views/generic/base.py</code>, line 70, in view
          

          
            <div class="context" id="c281473509106816">
              
                <ol start="63" class="pre-context" id="pre281473509106816">
                
                  <li onclick="toggle('pre281473509106816', 'post281473509106816')"><pre>            self = cls(**initkwargs)</pre></li>
                
                  <li onclick="toggle('pre281473509106816', 'post281473509106816')"><pre>            self.setup(request, *args, **kwargs)</pre></li>
                
                  <li onclick="toggle('pre281473509106816', 'post281473509106816')"><pre>            if not hasattr(self, &#x27;request&#x27;):</pre></li>
                
                  <li onclick="toggle('pre281473509106816', 'post281473509106816')"><pre>                raise AttributeError(</pre></li>
                
                  <li onclick="toggle('pre281473509106816', 'post281473509106816')"><pre>                    &quot;%s instance has no &#x27;request&#x27; attribute. Did you override &quot;</pre></li>
                
                  <li onclick="toggle('pre281473509106816', 'post281473509106816')"><pre>                    &quot;setup() and forget to call super()?&quot; % cls.__name__</pre></li>
                
                  <li onclick="toggle('pre281473509106816', 'post281473509106816')"><pre>                )</pre></li>
                
                </ol>
              
              <ol start="70" class="context-line">
                <li onclick="toggle('pre281473509106816', 'post281473509106816')"><pre>            return self.dispatch(request, *args, **kwargs)</pre> <span>…</span></li>
              </ol>
              
                <ol start='71' class="post-context" id="post281473509106816">
                  
                  <li onclick="toggle('pre281473509106816', 'post281473509106816')"><pre>        view.view_class = cls</pre></li>
                  
                  <li onclick="toggle('pre281473509106816', 'post281473509106816')"><pre>        view.view_initkwargs = initkwargs</pre></li>
                  
                  <li onclick="toggle('pre281473509106816', 'post281473509106816')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509106816', 'post281473509106816')"><pre>        # take name and docstring from class</pre></li>
                  
                  <li onclick="toggle('pre281473509106816', 'post281473509106816')"><pre>        update_wrapper(view, cls, updated=())</pre></li>
                  
                  <li onclick="toggle('pre281473509106816', 'post281473509106816')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509106816')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509106816">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#x27;portfolio.views.PortfolioStockCreate&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>initkwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#x27;portfolio_id&#x27;: 1}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#x27;/api/portfolios/1/add_stock/&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;portfolio.views.PortfolioStockCreate object at 0xffffa88d7670&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/rest_framework/views.py</code>, line 509, in dispatch
          

          
            <div class="context" id="c281473509829120">
              
                <ol start="502" class="pre-context" id="pre281473509829120">
                
                  <li onclick="toggle('pre281473509829120', 'post281473509829120')"><pre>                                  self.http_method_not_allowed)</pre></li>
                
                  <li onclick="toggle('pre281473509829120', 'post281473509829120')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre281473509829120', 'post281473509829120')"><pre>                handler = self.http_method_not_allowed</pre></li>
                
                  <li onclick="toggle('pre281473509829120', 'post281473509829120')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473509829120', 'post281473509829120')"><pre>            response = handler(request, *args, **kwargs)</pre></li>
                
                  <li onclick="toggle('pre281473509829120', 'post281473509829120')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473509829120', 'post281473509829120')"><pre>        except Exception as exc:</pre></li>
                
                </ol>
              
              <ol start="509" class="context-line">
                <li onclick="toggle('pre281473509829120', 'post281473509829120')"><pre>            response = self.handle_exception(exc)</pre> <span>…</span></li>
              </ol>
              
                <ol start='510' class="post-context" id="post281473509829120">
                  
                  <li onclick="toggle('pre281473509829120', 'post281473509829120')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509829120', 'post281473509829120')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>
                  
                  <li onclick="toggle('pre281473509829120', 'post281473509829120')"><pre>        return self.response</pre></li>
                  
                  <li onclick="toggle('pre281473509829120', 'post281473509829120')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509829120', 'post281473509829120')"><pre>    def options(self, request, *args, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre281473509829120', 'post281473509829120')"><pre>        &quot;&quot;&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509829120')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509829120">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method CreateAPIView.post of &lt;portfolio.views.PortfolioStockCreate object at 0xffffa88d7670&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#x27;portfolio_id&#x27;: 1}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request: POST &#x27;/api/portfolios/1/add_stock/&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;portfolio.views.PortfolioStockCreate object at 0xffffa88d7670&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/rest_framework/views.py</code>, line 469, in handle_exception
          

          
            <div class="context" id="c281473509827520">
              
                <ol start="462" class="pre-context" id="pre281473509827520">
                
                  <li onclick="toggle('pre281473509827520', 'post281473509827520')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473509827520', 'post281473509827520')"><pre>        exception_handler = self.get_exception_handler()</pre></li>
                
                  <li onclick="toggle('pre281473509827520', 'post281473509827520')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473509827520', 'post281473509827520')"><pre>        context = self.get_exception_handler_context()</pre></li>
                
                  <li onclick="toggle('pre281473509827520', 'post281473509827520')"><pre>        response = exception_handler(exc, context)</pre></li>
                
                  <li onclick="toggle('pre281473509827520', 'post281473509827520')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473509827520', 'post281473509827520')"><pre>        if response is None:</pre></li>
                
                </ol>
              
              <ol start="469" class="context-line">
                <li onclick="toggle('pre281473509827520', 'post281473509827520')"><pre>            self.raise_uncaught_exception(exc)</pre> <span>…</span></li>
              </ol>
              
                <ol start='470' class="post-context" id="post281473509827520">
                  
                  <li onclick="toggle('pre281473509827520', 'post281473509827520')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509827520', 'post281473509827520')"><pre>        response.exception = True</pre></li>
                  
                  <li onclick="toggle('pre281473509827520', 'post281473509827520')"><pre>        return response</pre></li>
                  
                  <li onclick="toggle('pre281473509827520', 'post281473509827520')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509827520', 'post281473509827520')"><pre>    def raise_uncaught_exception(self, exc):</pre></li>
                  
                  <li onclick="toggle('pre281473509827520', 'post281473509827520')"><pre>        if settings.DEBUG:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509827520')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509827520">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>context</td>
                    <td class="code"><pre>{&#x27;args&#x27;: (),
 &#x27;kwargs&#x27;: {&#x27;portfolio_id&#x27;: 1},
 &#x27;request&#x27;: &lt;rest_framework.request.Request: POST &#x27;/api/portfolios/1/add_stock/&#x27;&gt;,
 &#x27;view&#x27;: &lt;portfolio.views.PortfolioStockCreate object at 0xffffa88d7670&gt;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>TypeError(&#x27;Got a `TypeError` when calling `PortfolioStock.objects.create()`. This may be because you have a writable field on the serializer class that is not a valid argument to `PortfolioStock.objects.create()`. You may need to make the field read-only, or override the PortfolioStockSerializer.create() method to handle this correctly.\nOriginal exception was:\n Traceback (most recent call last):\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 1823, in get_prep_value\n    return int(value)\nTypeError: int() argument must be a string, a bytes-like object or a number, not \&#x27;Stock\&#x27;\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File &quot;/usr/local/lib/python3.9/site-packages/rest_framework/serializers.py&quot;, line 939, in create\n    instance = ModelClass._default_manager.create(**validated_data)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, line 85, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, line 453, in create\n    obj.save(force_insert=True, using=self.db)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 726, in save\n    self.save_base(using=using, force_insert=force_insert,\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 763, in save_base\n    updated = self._save_table(\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 868, in _save_table\n    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 906, in _do_insert\n    return manager._insert(\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, line 85, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, line 1270, in _insert\n    return query.get_compiler(using=using).execute_sql(returning_fields)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1415, in execute_sql\n    for sql, params in self.as_sql():\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1358, in as_sql\n    value_rows = [\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1359, in &lt;listcomp&gt;\n    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1359, in &lt;listcomp&gt;\n    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1300, in prepare_value\n    value = field.get_db_prep_save(value, connection=self.connection)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/related.py&quot;, line 971, in get_db_prep_save\n    return self.target_field.get_db_prep_save(value, connection=connection)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 842, in get_db_prep_save\n    return self.get_db_prep_value(value, connection=connection, prepared=False)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 2486, in get_db_prep_value\n    value = self.get_prep_value(value)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 1825, in get_prep_value\n    raise e.__class__(\nTypeError: Field \&#x27;id\&#x27; expected a number but got &lt;Stock: Microsoft Corporation (MSFT)&gt;.\n&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>exception_handler</td>
                    <td class="code"><pre>&lt;function exception_handler at 0xffffa8be73a0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;portfolio.views.PortfolioStockCreate object at 0xffffa88d7670&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/rest_framework/views.py</code>, line 480, in raise_uncaught_exception
          

          
            <div class="context" id="c281473509829056">
              
                <ol start="473" class="pre-context" id="pre281473509829056">
                
                  <li onclick="toggle('pre281473509829056', 'post281473509829056')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473509829056', 'post281473509829056')"><pre>    def raise_uncaught_exception(self, exc):</pre></li>
                
                  <li onclick="toggle('pre281473509829056', 'post281473509829056')"><pre>        if settings.DEBUG:</pre></li>
                
                  <li onclick="toggle('pre281473509829056', 'post281473509829056')"><pre>            request = self.request</pre></li>
                
                  <li onclick="toggle('pre281473509829056', 'post281473509829056')"><pre>            renderer_format = getattr(request.accepted_renderer, &#x27;format&#x27;)</pre></li>
                
                  <li onclick="toggle('pre281473509829056', 'post281473509829056')"><pre>            use_plaintext_traceback = renderer_format not in (&#x27;html&#x27;, &#x27;api&#x27;, &#x27;admin&#x27;)</pre></li>
                
                  <li onclick="toggle('pre281473509829056', 'post281473509829056')"><pre>            request.force_plaintext_errors(use_plaintext_traceback)</pre></li>
                
                </ol>
              
              <ol start="480" class="context-line">
                <li onclick="toggle('pre281473509829056', 'post281473509829056')"><pre>        raise exc</pre> <span>…</span></li>
              </ol>
              
                <ol start='481' class="post-context" id="post281473509829056">
                  
                  <li onclick="toggle('pre281473509829056', 'post281473509829056')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509829056', 'post281473509829056')"><pre>    # Note: Views are made CSRF exempt from within `as_view` as to prevent</pre></li>
                  
                  <li onclick="toggle('pre281473509829056', 'post281473509829056')"><pre>    # accidental removal of this exemption in cases where `dispatch` needs to</pre></li>
                  
                  <li onclick="toggle('pre281473509829056', 'post281473509829056')"><pre>    # be overridden.</pre></li>
                  
                  <li onclick="toggle('pre281473509829056', 'post281473509829056')"><pre>    def dispatch(self, request, *args, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre281473509829056', 'post281473509829056')"><pre>        &quot;&quot;&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509829056')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509829056">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>TypeError(&#x27;Got a `TypeError` when calling `PortfolioStock.objects.create()`. This may be because you have a writable field on the serializer class that is not a valid argument to `PortfolioStock.objects.create()`. You may need to make the field read-only, or override the PortfolioStockSerializer.create() method to handle this correctly.\nOriginal exception was:\n Traceback (most recent call last):\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 1823, in get_prep_value\n    return int(value)\nTypeError: int() argument must be a string, a bytes-like object or a number, not \&#x27;Stock\&#x27;\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File &quot;/usr/local/lib/python3.9/site-packages/rest_framework/serializers.py&quot;, line 939, in create\n    instance = ModelClass._default_manager.create(**validated_data)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, line 85, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, line 453, in create\n    obj.save(force_insert=True, using=self.db)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 726, in save\n    self.save_base(using=using, force_insert=force_insert,\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 763, in save_base\n    updated = self._save_table(\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 868, in _save_table\n    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 906, in _do_insert\n    return manager._insert(\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, line 85, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, line 1270, in _insert\n    return query.get_compiler(using=using).execute_sql(returning_fields)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1415, in execute_sql\n    for sql, params in self.as_sql():\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1358, in as_sql\n    value_rows = [\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1359, in &lt;listcomp&gt;\n    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1359, in &lt;listcomp&gt;\n    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1300, in prepare_value\n    value = field.get_db_prep_save(value, connection=self.connection)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/related.py&quot;, line 971, in get_db_prep_save\n    return self.target_field.get_db_prep_save(value, connection=connection)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 842, in get_db_prep_save\n    return self.get_db_prep_value(value, connection=connection, prepared=False)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 2486, in get_db_prep_value\n    value = self.get_prep_value(value)\n  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 1825, in get_prep_value\n    raise e.__class__(\nTypeError: Field \&#x27;id\&#x27; expected a number but got &lt;Stock: Microsoft Corporation (MSFT)&gt;.\n&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>renderer_format</td>
                    <td class="code"><pre>&#x27;json&#x27;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request: POST &#x27;/api/portfolios/1/add_stock/&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;portfolio.views.PortfolioStockCreate object at 0xffffa88d7670&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>use_plaintext_traceback</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/rest_framework/views.py</code>, line 506, in dispatch
          

          
            <div class="context" id="c281473509827328">
              
                <ol start="499" class="pre-context" id="pre281473509827328">
                
                  <li onclick="toggle('pre281473509827328', 'post281473509827328')"><pre>            # Get the appropriate handler method</pre></li>
                
                  <li onclick="toggle('pre281473509827328', 'post281473509827328')"><pre>            if request.method.lower() in self.http_method_names:</pre></li>
                
                  <li onclick="toggle('pre281473509827328', 'post281473509827328')"><pre>                handler = getattr(self, request.method.lower(),</pre></li>
                
                  <li onclick="toggle('pre281473509827328', 'post281473509827328')"><pre>                                  self.http_method_not_allowed)</pre></li>
                
                  <li onclick="toggle('pre281473509827328', 'post281473509827328')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre281473509827328', 'post281473509827328')"><pre>                handler = self.http_method_not_allowed</pre></li>
                
                  <li onclick="toggle('pre281473509827328', 'post281473509827328')"><pre></pre></li>
                
                </ol>
              
              <ol start="506" class="context-line">
                <li onclick="toggle('pre281473509827328', 'post281473509827328')"><pre>            response = handler(request, *args, **kwargs)</pre> <span>…</span></li>
              </ol>
              
                <ol start='507' class="post-context" id="post281473509827328">
                  
                  <li onclick="toggle('pre281473509827328', 'post281473509827328')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509827328', 'post281473509827328')"><pre>        except Exception as exc:</pre></li>
                  
                  <li onclick="toggle('pre281473509827328', 'post281473509827328')"><pre>            response = self.handle_exception(exc)</pre></li>
                  
                  <li onclick="toggle('pre281473509827328', 'post281473509827328')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509827328', 'post281473509827328')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>
                  
                  <li onclick="toggle('pre281473509827328', 'post281473509827328')"><pre>        return self.response</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509827328')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509827328">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method CreateAPIView.post of &lt;portfolio.views.PortfolioStockCreate object at 0xffffa88d7670&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#x27;portfolio_id&#x27;: 1}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request: POST &#x27;/api/portfolios/1/add_stock/&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;portfolio.views.PortfolioStockCreate object at 0xffffa88d7670&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/rest_framework/generics.py</code>, line 190, in post
          

          
            <div class="context" id="c281473507506944">
              
                <ol start="183" class="pre-context" id="pre281473507506944">
                
                  <li onclick="toggle('pre281473507506944', 'post281473507506944')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473507506944', 'post281473507506944')"><pre>class CreateAPIView(mixins.CreateModelMixin,</pre></li>
                
                  <li onclick="toggle('pre281473507506944', 'post281473507506944')"><pre>                    GenericAPIView):</pre></li>
                
                  <li onclick="toggle('pre281473507506944', 'post281473507506944')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre281473507506944', 'post281473507506944')"><pre>    Concrete view for creating a model instance.</pre></li>
                
                  <li onclick="toggle('pre281473507506944', 'post281473507506944')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre281473507506944', 'post281473507506944')"><pre>    def post(self, request, *args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="190" class="context-line">
                <li onclick="toggle('pre281473507506944', 'post281473507506944')"><pre>        return self.create(request, *args, **kwargs)</pre> <span>…</span></li>
              </ol>
              
                <ol start='191' class="post-context" id="post281473507506944">
                  
                  <li onclick="toggle('pre281473507506944', 'post281473507506944')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473507506944', 'post281473507506944')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473507506944', 'post281473507506944')"><pre>class ListAPIView(mixins.ListModelMixin,</pre></li>
                  
                  <li onclick="toggle('pre281473507506944', 'post281473507506944')"><pre>                  GenericAPIView):</pre></li>
                  
                  <li onclick="toggle('pre281473507506944', 'post281473507506944')"><pre>    &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre281473507506944', 'post281473507506944')"><pre>    Concrete view for listing a queryset.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473507506944')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473507506944">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#x27;portfolio_id&#x27;: 1}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request: POST &#x27;/api/portfolios/1/add_stock/&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;portfolio.views.PortfolioStockCreate object at 0xffffa88d7670&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/rest_framework/mixins.py</code>, line 19, in create
          

          
            <div class="context" id="c281473509830080">
              
                <ol start="12" class="pre-context" id="pre281473509830080">
                
                  <li onclick="toggle('pre281473509830080', 'post281473509830080')"><pre>class CreateModelMixin:</pre></li>
                
                  <li onclick="toggle('pre281473509830080', 'post281473509830080')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre281473509830080', 'post281473509830080')"><pre>    Create a model instance.</pre></li>
                
                  <li onclick="toggle('pre281473509830080', 'post281473509830080')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre281473509830080', 'post281473509830080')"><pre>    def create(self, request, *args, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre281473509830080', 'post281473509830080')"><pre>        serializer = self.get_serializer(data=request.data)</pre></li>
                
                  <li onclick="toggle('pre281473509830080', 'post281473509830080')"><pre>        serializer.is_valid(raise_exception=True)</pre></li>
                
                </ol>
              
              <ol start="19" class="context-line">
                <li onclick="toggle('pre281473509830080', 'post281473509830080')"><pre>        self.perform_create(serializer)</pre> <span>…</span></li>
              </ol>
              
                <ol start='20' class="post-context" id="post281473509830080">
                  
                  <li onclick="toggle('pre281473509830080', 'post281473509830080')"><pre>        headers = self.get_success_headers(serializer.data)</pre></li>
                  
                  <li onclick="toggle('pre281473509830080', 'post281473509830080')"><pre>        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre></li>
                  
                  <li onclick="toggle('pre281473509830080', 'post281473509830080')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509830080', 'post281473509830080')"><pre>    def perform_create(self, serializer):</pre></li>
                  
                  <li onclick="toggle('pre281473509830080', 'post281473509830080')"><pre>        serializer.save()</pre></li>
                  
                  <li onclick="toggle('pre281473509830080', 'post281473509830080')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509830080')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509830080">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#x27;portfolio_id&#x27;: 1}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request: POST &#x27;/api/portfolios/1/add_stock/&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;portfolio.views.PortfolioStockCreate object at 0xffffa88d7670&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>serializer</td>
                    <td class="code"><pre>PortfolioStockSerializer(context={&#x27;request&#x27;: &lt;rest_framework.request.Request: POST &#x27;/api/portfolios/1/add_stock/&#x27;&gt;, &#x27;format&#x27;: None, &#x27;view&#x27;: &lt;portfolio.views.PortfolioStockCreate object&gt;}, data={&#x27;stock_id&#x27;: 2, &#x27;quantity&#x27;: 5}):
    stock = StockSerializer(read_only=True):
        id = IntegerField(label=&#x27;ID&#x27;, read_only=True)
        symbol = CharField(max_length=10, validators=[&lt;UniqueValidator(queryset=Stock.objects.all())&gt;])
        name = CharField(allow_null=True, max_length=100, required=False)
        price = FloatField(required=False)
    stock_id = PrimaryKeyRelatedField(queryset=&lt;QuerySet [&lt;Stock: Apple Inc. (AAPL)&gt;, &lt;Stock: Microsoft Corporation (MSFT)&gt;, &lt;Stock: Alphabet Inc. (GOOGL)&gt;, &lt;Stock: Amazon.com, Inc. (AMZN)&gt;, &lt;Stock: Tesla, Inc. (TSLA)&gt;, &lt;Stock: N/A (FB)&gt;, &lt;Stock: NVIDIA Corporation (NVDA)&gt;, &lt;Stock: Berkshire Hathaway Inc. New (BRK-B)&gt;, &lt;Stock: JP Morgan Chase &amp; Co. (JPM)&gt;, &lt;Stock: Johnson &amp; Johnson (JNJ)&gt;]&gt;, write_only=True)
    quantity = IntegerField(max_value=2147483647, min_value=-2147483648)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/backend/portfolio/views.py</code>, line 30, in perform_create
          

          
            <div class="context" id="c281473509733568">
              
                <ol start="23" class="pre-context" id="pre281473509733568">
                
                  <li onclick="toggle('pre281473509733568', 'post281473509733568')"><pre>class PortfolioStockCreate(generics.CreateAPIView):</pre></li>
                
                  <li onclick="toggle('pre281473509733568', 'post281473509733568')"><pre>    serializer_class = PortfolioStockSerializer</pre></li>
                
                  <li onclick="toggle('pre281473509733568', 'post281473509733568')"><pre>    permission_classes = [permissions.IsAuthenticated]</pre></li>
                
                  <li onclick="toggle('pre281473509733568', 'post281473509733568')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473509733568', 'post281473509733568')"><pre>    def perform_create(self, serializer):</pre></li>
                
                  <li onclick="toggle('pre281473509733568', 'post281473509733568')"><pre>        portfolio_id = self.kwargs[&#x27;portfolio_id&#x27;]</pre></li>
                
                  <li onclick="toggle('pre281473509733568', 'post281473509733568')"><pre>        portfolio = Portfolio.objects.get(id=portfolio_id, user=self.request.user)</pre></li>
                
                </ol>
              
              <ol start="30" class="context-line">
                <li onclick="toggle('pre281473509733568', 'post281473509733568')"><pre>        serializer.save(portfolio=portfolio)</pre> <span>…</span></li>
              </ol>
              
                <ol start='31' class="post-context" id="post281473509733568">
                  
                  <li onclick="toggle('pre281473509733568', 'post281473509733568')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509733568', 'post281473509733568')"><pre>class PortfolioStockUpdate(generics.UpdateAPIView):</pre></li>
                  
                  <li onclick="toggle('pre281473509733568', 'post281473509733568')"><pre>    serializer_class = PortfolioStockSerializer</pre></li>
                  
                  <li onclick="toggle('pre281473509733568', 'post281473509733568')"><pre>    permission_classes = [permissions.IsAuthenticated]</pre></li>
                  
                  <li onclick="toggle('pre281473509733568', 'post281473509733568')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509733568', 'post281473509733568')"><pre>    def get_queryset(self):</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509733568')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509733568">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>portfolio</td>
                    <td class="code"><pre>&lt;Portfolio: Portfolio of test - 2&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>portfolio_id</td>
                    <td class="code"><pre>1</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;portfolio.views.PortfolioStockCreate object at 0xffffa88d7670&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>serializer</td>
                    <td class="code"><pre>PortfolioStockSerializer(context={&#x27;request&#x27;: &lt;rest_framework.request.Request: POST &#x27;/api/portfolios/1/add_stock/&#x27;&gt;, &#x27;format&#x27;: None, &#x27;view&#x27;: &lt;portfolio.views.PortfolioStockCreate object&gt;}, data={&#x27;stock_id&#x27;: 2, &#x27;quantity&#x27;: 5}):
    stock = StockSerializer(read_only=True):
        id = IntegerField(label=&#x27;ID&#x27;, read_only=True)
        symbol = CharField(max_length=10, validators=[&lt;UniqueValidator(queryset=Stock.objects.all())&gt;])
        name = CharField(allow_null=True, max_length=100, required=False)
        price = FloatField(required=False)
    stock_id = PrimaryKeyRelatedField(queryset=&lt;QuerySet [&lt;Stock: Apple Inc. (AAPL)&gt;, &lt;Stock: Microsoft Corporation (MSFT)&gt;, &lt;Stock: Alphabet Inc. (GOOGL)&gt;, &lt;Stock: Amazon.com, Inc. (AMZN)&gt;, &lt;Stock: Tesla, Inc. (TSLA)&gt;, &lt;Stock: N/A (FB)&gt;, &lt;Stock: NVIDIA Corporation (NVDA)&gt;, &lt;Stock: Berkshire Hathaway Inc. New (BRK-B)&gt;, &lt;Stock: JP Morgan Chase &amp; Co. (JPM)&gt;, &lt;Stock: Johnson &amp; Johnson (JNJ)&gt;]&gt;, write_only=True)
    quantity = IntegerField(max_value=2147483647, min_value=-2147483648)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/rest_framework/serializers.py</code>, line 205, in save
          

          
            <div class="context" id="c281473509826880">
              
                <ol start="198" class="pre-context" id="pre281473509826880">
                
                  <li onclick="toggle('pre281473509826880', 'post281473509826880')"><pre></pre></li>
                
                  <li onclick="toggle('pre281473509826880', 'post281473509826880')"><pre>        if self.instance is not None:</pre></li>
                
                  <li onclick="toggle('pre281473509826880', 'post281473509826880')"><pre>            self.instance = self.update(self.instance, validated_data)</pre></li>
                
                  <li onclick="toggle('pre281473509826880', 'post281473509826880')"><pre>            assert self.instance is not None, (</pre></li>
                
                  <li onclick="toggle('pre281473509826880', 'post281473509826880')"><pre>                &#x27;`update()` did not return an object instance.&#x27;</pre></li>
                
                  <li onclick="toggle('pre281473509826880', 'post281473509826880')"><pre>            )</pre></li>
                
                  <li onclick="toggle('pre281473509826880', 'post281473509826880')"><pre>        else:</pre></li>
                
                </ol>
              
              <ol start="205" class="context-line">
                <li onclick="toggle('pre281473509826880', 'post281473509826880')"><pre>            self.instance = self.create(validated_data)</pre> <span>…</span></li>
              </ol>
              
                <ol start='206' class="post-context" id="post281473509826880">
                  
                  <li onclick="toggle('pre281473509826880', 'post281473509826880')"><pre>            assert self.instance is not None, (</pre></li>
                  
                  <li onclick="toggle('pre281473509826880', 'post281473509826880')"><pre>                &#x27;`create()` did not return an object instance.&#x27;</pre></li>
                  
                  <li onclick="toggle('pre281473509826880', 'post281473509826880')"><pre>            )</pre></li>
                  
                  <li onclick="toggle('pre281473509826880', 'post281473509826880')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509826880', 'post281473509826880')"><pre>        return self.instance</pre></li>
                  
                  <li onclick="toggle('pre281473509826880', 'post281473509826880')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509826880')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509826880">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#x27;portfolio&#x27;: &lt;Portfolio: Portfolio of test - 2&gt;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>PortfolioStockSerializer(context={&#x27;request&#x27;: &lt;rest_framework.request.Request: POST &#x27;/api/portfolios/1/add_stock/&#x27;&gt;, &#x27;format&#x27;: None, &#x27;view&#x27;: &lt;portfolio.views.PortfolioStockCreate object&gt;}, data={&#x27;stock_id&#x27;: 2, &#x27;quantity&#x27;: 5}):
    stock = StockSerializer(read_only=True):
        id = IntegerField(label=&#x27;ID&#x27;, read_only=True)
        symbol = CharField(max_length=10, validators=[&lt;UniqueValidator(queryset=Stock.objects.all())&gt;])
        name = CharField(allow_null=True, max_length=100, required=False)
        price = FloatField(required=False)
    stock_id = PrimaryKeyRelatedField(queryset=&lt;QuerySet [&lt;Stock: Apple Inc. (AAPL)&gt;, &lt;Stock: Microsoft Corporation (MSFT)&gt;, &lt;Stock: Alphabet Inc. (GOOGL)&gt;, &lt;Stock: Amazon.com, Inc. (AMZN)&gt;, &lt;Stock: Tesla, Inc. (TSLA)&gt;, &lt;Stock: N/A (FB)&gt;, &lt;Stock: NVIDIA Corporation (NVDA)&gt;, &lt;Stock: Berkshire Hathaway Inc. New (BRK-B)&gt;, &lt;Stock: JP Morgan Chase &amp; Co. (JPM)&gt;, &lt;Stock: Johnson &amp; Johnson (JNJ)&gt;]&gt;, write_only=True)
    quantity = IntegerField(max_value=2147483647, min_value=-2147483648)</pre></td>
                  </tr>
                
                  <tr>
                    <td>validated_data</td>
                    <td class="code"><pre>{&#x27;portfolio&#x27;: &lt;Portfolio: Portfolio of test - 2&gt;,
 &#x27;quantity&#x27;: 5,
 &#x27;stock_id&#x27;: &lt;Stock: Microsoft Corporation (MSFT)&gt;}</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/usr/local/lib/python3.9/site-packages/rest_framework/serializers.py</code>, line 958, in create
          

          
            <div class="context" id="c281473509829760">
              
                <ol start="951" class="pre-context" id="pre281473509829760">
                
                  <li onclick="toggle('pre281473509829760', 'post281473509829760')"><pre>                    ModelClass._default_manager.name,</pre></li>
                
                  <li onclick="toggle('pre281473509829760', 'post281473509829760')"><pre>                    ModelClass.__name__,</pre></li>
                
                  <li onclick="toggle('pre281473509829760', 'post281473509829760')"><pre>                    ModelClass._default_manager.name,</pre></li>
                
                  <li onclick="toggle('pre281473509829760', 'post281473509829760')"><pre>                    self.__class__.__name__,</pre></li>
                
                  <li onclick="toggle('pre281473509829760', 'post281473509829760')"><pre>                    tb</pre></li>
                
                  <li onclick="toggle('pre281473509829760', 'post281473509829760')"><pre>                )</pre></li>
                
                  <li onclick="toggle('pre281473509829760', 'post281473509829760')"><pre>            )</pre></li>
                
                </ol>
              
              <ol start="958" class="context-line">
                <li onclick="toggle('pre281473509829760', 'post281473509829760')"><pre>            raise TypeError(msg)</pre> <span>…</span></li>
              </ol>
              
                <ol start='959' class="post-context" id="post281473509829760">
                  
                  <li onclick="toggle('pre281473509829760', 'post281473509829760')"><pre></pre></li>
                  
                  <li onclick="toggle('pre281473509829760', 'post281473509829760')"><pre>        # Save many-to-many relationships after the instance is created.</pre></li>
                  
                  <li onclick="toggle('pre281473509829760', 'post281473509829760')"><pre>        if many_to_many:</pre></li>
                  
                  <li onclick="toggle('pre281473509829760', 'post281473509829760')"><pre>            for field_name, value in many_to_many.items():</pre></li>
                  
                  <li onclick="toggle('pre281473509829760', 'post281473509829760')"><pre>                field = getattr(instance, field_name)</pre></li>
                  
                  <li onclick="toggle('pre281473509829760', 'post281473509829760')"><pre>                field.set(value)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '281473509829760')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v281473509829760">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>ModelClass</td>
                    <td class="code"><pre>&lt;class &#x27;portfolio.models.PortfolioStock&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>field_name</td>
                    <td class="code"><pre>&#x27;stock&#x27;</pre></td>
                  </tr>
                
                  <tr>
                    <td>info</td>
                    <td class="code"><pre>FieldResult(pk=&lt;django.db.models.fields.BigAutoField: id&gt;, fields=OrderedDict([(&#x27;quantity&#x27;, &lt;django.db.models.fields.IntegerField: quantity&gt;)]), forward_relations=OrderedDict([(&#x27;portfolio&#x27;, RelationInfo(model_field=&lt;django.db.models.fields.related.ForeignKey: portfolio&gt;, related_model=&lt;class &#x27;portfolio.models.Portfolio&#x27;&gt;, to_many=False, to_field=&#x27;id&#x27;, has_through_model=False, reverse=False)), (&#x27;stock&#x27;, RelationInfo(model_field=&lt;django.db.models.fields.related.ForeignKey: stock&gt;, related_model=&lt;class &#x27;portfolio.models.Stock&#x27;&gt;, to_many=False, to_field=&#x27;id&#x27;, has_through_model=False, reverse=False))]), reverse_relations=OrderedDict(), fields_and_pk=OrderedDict([(&#x27;pk&#x27;, &lt;django.db.models.fields.BigAutoField: id&gt;), (&#x27;id&#x27;, &lt;django.db.models.fields.BigAutoField: id&gt;), (&#x27;quantity&#x27;, &lt;django.db.models.fields.IntegerField: quantity&gt;)]), relations=OrderedDict([(&#x27;portfolio&#x27;, RelationInfo(model_field=&lt;django.db.models.fields.related.ForeignKey: portfolio&gt;, related_model=&lt;class &#x27;portfolio.models.Portfolio&#x27;&gt;, to_many=False, to_field=&#x27;id&#x27;, has_through_model=False, reverse=False)), (&#x27;stock&#x27;, RelationInfo(model_field=&lt;django.db.models.fields.related.ForeignKey: stock&gt;, related_model=&lt;class &#x27;portfolio.models.Stock&#x27;&gt;, to_many=False, to_field=&#x27;id&#x27;, has_through_model=False, reverse=False))]))</pre></td>
                  </tr>
                
                  <tr>
                    <td>many_to_many</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>msg</td>
                    <td class="code"><pre>(&#x27;Got a `TypeError` when calling `PortfolioStock.objects.create()`. This may &#x27;
 &#x27;be because you have a writable field on the serializer class that is not a &#x27;
 &#x27;valid argument to `PortfolioStock.objects.create()`. You may need to make &#x27;
 &#x27;the field read-only, or override the PortfolioStockSerializer.create() &#x27;
 &#x27;method to handle this correctly.\n&#x27;
 &#x27;Original exception was:\n&#x27;
 &#x27; Traceback (most recent call last):\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, &#x27;
 &#x27;line 1823, in get_prep_value\n&#x27;
 &#x27;    return int(value)\n&#x27;
 &#x27;TypeError: int() argument must be a string, a bytes-like object or a number, &#x27;
 &quot;not &#x27;Stock&#x27;\n&quot;
 &#x27;\n&#x27;
 &#x27;The above exception was the direct cause of the following exception:\n&#x27;
 &#x27;\n&#x27;
 &#x27;Traceback (most recent call last):\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/rest_framework/serializers.py&quot;, line &#x27;
 &#x27;939, in create\n&#x27;
 &#x27;    instance = ModelClass._default_manager.create(**validated_data)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, &#x27;
 &#x27;line 85, in manager_method\n&#x27;
 &#x27;    return getattr(self.get_queryset(), name)(*args, **kwargs)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, &#x27;
 &#x27;line 453, in create\n&#x27;
 &#x27;    obj.save(force_insert=True, using=self.db)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, &#x27;
 &#x27;line 726, in save\n&#x27;
 &#x27;    self.save_base(using=using, force_insert=force_insert,\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, &#x27;
 &#x27;line 763, in save_base\n&#x27;
 &#x27;    updated = self._save_table(\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, &#x27;
 &#x27;line 868, in _save_table\n&#x27;
 &#x27;    results = self._do_insert(cls._base_manager, using, fields, &#x27;
 &#x27;returning_fields, raw)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, &#x27;
 &#x27;line 906, in _do_insert\n&#x27;
 &#x27;    return manager._insert(\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, &#x27;
 &#x27;line 85, in manager_method\n&#x27;
 &#x27;    return getattr(self.get_queryset(), name)(*args, **kwargs)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, &#x27;
 &#x27;line 1270, in _insert\n&#x27;
 &#x27;    return query.get_compiler(using=using).execute_sql(returning_fields)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1415, in execute_sql\n&#x27;
 &#x27;    for sql, params in self.as_sql():\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1358, in as_sql\n&#x27;
 &#x27;    value_rows = [\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1359, in &lt;listcomp&gt;\n&#x27;
 &#x27;    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in &#x27;
 &#x27;fields]\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1359, in &lt;listcomp&gt;\n&#x27;
 &#x27;    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in &#x27;
 &#x27;fields]\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1300, in prepare_value\n&#x27;
 &#x27;    value = field.get_db_prep_save(value, connection=self.connection)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/related.py&quot;, &#x27;
 &#x27;line 971, in get_db_prep_save\n&#x27;
 &#x27;    return self.target_field.get_db_prep_save(value, connection=connection)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, &#x27;
 &#x27;line 842, in get_db_prep_save\n&#x27;
 &#x27;    return self.get_db_prep_value(value, connection=connection, &#x27;
 &#x27;prepared=False)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, &#x27;
 &#x27;line 2486, in get_db_prep_value\n&#x27;
 &#x27;    value = self.get_prep_value(value)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, &#x27;
 &#x27;line 1825, in get_prep_value\n&#x27;
 &#x27;    raise e.__class__(\n&#x27;
 &quot;TypeError: Field &#x27;id&#x27; expected a number but got &lt;Stock: Microsoft &quot;
 &#x27;Corporat… &lt;trimmed 4112 bytes string&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>relation_info</td>
                    <td class="code"><pre>RelationInfo(model_field=&lt;django.db.models.fields.related.ForeignKey: stock&gt;, related_model=&lt;class &#x27;portfolio.models.Stock&#x27;&gt;, to_many=False, to_field=&#x27;id&#x27;, has_through_model=False, reverse=False)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>PortfolioStockSerializer(context={&#x27;request&#x27;: &lt;rest_framework.request.Request: POST &#x27;/api/portfolios/1/add_stock/&#x27;&gt;, &#x27;format&#x27;: None, &#x27;view&#x27;: &lt;portfolio.views.PortfolioStockCreate object&gt;}, data={&#x27;stock_id&#x27;: 2, &#x27;quantity&#x27;: 5}):
    stock = StockSerializer(read_only=True):
        id = IntegerField(label=&#x27;ID&#x27;, read_only=True)
        symbol = CharField(max_length=10, validators=[&lt;UniqueValidator(queryset=Stock.objects.all())&gt;])
        name = CharField(allow_null=True, max_length=100, required=False)
        price = FloatField(required=False)
    stock_id = PrimaryKeyRelatedField(queryset=&lt;QuerySet [&lt;Stock: Apple Inc. (AAPL)&gt;, &lt;Stock: Microsoft Corporation (MSFT)&gt;, &lt;Stock: Alphabet Inc. (GOOGL)&gt;, &lt;Stock: Amazon.com, Inc. (AMZN)&gt;, &lt;Stock: Tesla, Inc. (TSLA)&gt;, &lt;Stock: N/A (FB)&gt;, &lt;Stock: NVIDIA Corporation (NVDA)&gt;, &lt;Stock: Berkshire Hathaway Inc. New (BRK-B)&gt;, &lt;Stock: JP Morgan Chase &amp; Co. (JPM)&gt;, &lt;Stock: Johnson &amp; Johnson (JNJ)&gt;]&gt;, write_only=True)
    quantity = IntegerField(max_value=2147483647, min_value=-2147483648)</pre></td>
                  </tr>
                
                  <tr>
                    <td>tb</td>
                    <td class="code"><pre>(&#x27;Traceback (most recent call last):\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, &#x27;
 &#x27;line 1823, in get_prep_value\n&#x27;
 &#x27;    return int(value)\n&#x27;
 &#x27;TypeError: int() argument must be a string, a bytes-like object or a number, &#x27;
 &quot;not &#x27;Stock&#x27;\n&quot;
 &#x27;\n&#x27;
 &#x27;The above exception was the direct cause of the following exception:\n&#x27;
 &#x27;\n&#x27;
 &#x27;Traceback (most recent call last):\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/rest_framework/serializers.py&quot;, line &#x27;
 &#x27;939, in create\n&#x27;
 &#x27;    instance = ModelClass._default_manager.create(**validated_data)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, &#x27;
 &#x27;line 85, in manager_method\n&#x27;
 &#x27;    return getattr(self.get_queryset(), name)(*args, **kwargs)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, &#x27;
 &#x27;line 453, in create\n&#x27;
 &#x27;    obj.save(force_insert=True, using=self.db)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, &#x27;
 &#x27;line 726, in save\n&#x27;
 &#x27;    self.save_base(using=using, force_insert=force_insert,\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, &#x27;
 &#x27;line 763, in save_base\n&#x27;
 &#x27;    updated = self._save_table(\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, &#x27;
 &#x27;line 868, in _save_table\n&#x27;
 &#x27;    results = self._do_insert(cls._base_manager, using, fields, &#x27;
 &#x27;returning_fields, raw)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, &#x27;
 &#x27;line 906, in _do_insert\n&#x27;
 &#x27;    return manager._insert(\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, &#x27;
 &#x27;line 85, in manager_method\n&#x27;
 &#x27;    return getattr(self.get_queryset(), name)(*args, **kwargs)\n&#x27;
 &#x27;  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, &#x27;
 &#x27;line 1270, in _insert\n&#x27;
 &#x27;    return query.get_compiler(using=using).execute_sql(returning_fields)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1415, in execute_sql\n&#x27;
 &#x27;    for sql, params in self.as_sql():\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1358, in as_sql\n&#x27;
 &#x27;    value_rows = [\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1359, in &lt;listcomp&gt;\n&#x27;
 &#x27;    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in &#x27;
 &#x27;fields]\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1359, in &lt;listcomp&gt;\n&#x27;
 &#x27;    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in &#x27;
 &#x27;fields]\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, &#x27;
 &#x27;line 1300, in prepare_value\n&#x27;
 &#x27;    value = field.get_db_prep_save(value, connection=self.connection)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/related.py&quot;, &#x27;
 &#x27;line 971, in get_db_prep_save\n&#x27;
 &#x27;    return self.target_field.get_db_prep_save(value, connection=connection)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, &#x27;
 &#x27;line 842, in get_db_prep_save\n&#x27;
 &#x27;    return self.get_db_prep_value(value, connection=connection, &#x27;
 &#x27;prepared=False)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, &#x27;
 &#x27;line 2486, in get_db_prep_value\n&#x27;
 &#x27;    value = self.get_prep_value(value)\n&#x27;
 &#x27;  File &#x27;
 &#x27;&quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, &#x27;
 &#x27;line 1825, in get_prep_value\n&#x27;
 &#x27;    raise e.__class__(\n&#x27;
 &quot;TypeError: Field &#x27;id&#x27; expected a number but got &lt;Stock: Microsoft &quot;
 &#x27;Corporation (MSFT)&gt;.\n&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>validated_data</td>
                    <td class="code"><pre>{&#x27;portfolio&#x27;: &lt;Portfolio: Portfolio of test - 2&gt;,
 &#x27;quantity&#x27;: 5,
 &#x27;stock_id&#x27;: &lt;Stock: Microsoft Corporation (MSFT)&gt;}</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
    </ul>
  </div>
  <form action="https://dpaste.com/" name="pasteform" id="pasteform" method="post">

  <div id="pastebinTraceback" class="pastebin">
    <input type="hidden" name="language" value="PythonConsole">
    <input type="hidden" name="title"
      value="TypeError at /api/portfolios/1/add_stock/">
    <input type="hidden" name="source" value="Django Dpaste Agent">
    <input type="hidden" name="poster" value="Django">
    <textarea name="content" id="traceback_area" cols="140" rows="25">
Environment:


Request Method: POST
Request URL: http://localhost:8000/api/portfolios/1/add_stock/

Django Version: 3.2.4
Python Version: 3.9.19
Installed Applications:
[&#x27;django.contrib.admin&#x27;,
 &#x27;django.contrib.auth&#x27;,
 &#x27;django.contrib.contenttypes&#x27;,
 &#x27;django.contrib.sessions&#x27;,
 &#x27;django.contrib.messages&#x27;,
 &#x27;django.contrib.staticfiles&#x27;,
 &#x27;rest_framework&#x27;,
 &#x27;rest_framework.authtoken&#x27;,
 &#x27;portfolio&#x27;,
 &#x27;corsheaders&#x27;,
 &#x27;users&#x27;,
 &#x27;stocks&#x27;]
Installed Middleware:
[&#x27;django.middleware.security.SecurityMiddleware&#x27;,
 &#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;,
 &#x27;django.middleware.common.CommonMiddleware&#x27;,
 &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,
 &#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;,
 &#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;,
 &#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;,
 &#x27;corsheaders.middleware.CorsMiddleware&#x27;]



Traceback (most recent call last):
  File "/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py", line 1823, in get_prep_value
    return int(value)

The above exception (int() argument must be a string, a bytes-like object or a number, not &#x27;Stock&#x27;) was the direct cause of the following exception:
  File "/usr/local/lib/python3.9/site-packages/rest_framework/serializers.py", line 939, in create
    instance = ModelClass._default_manager.create(**validated_data)
  File "/usr/local/lib/python3.9/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/usr/local/lib/python3.9/site-packages/django/db/models/query.py", line 453, in create
    obj.save(force_insert=True, using=self.db)
  File "/usr/local/lib/python3.9/site-packages/django/db/models/base.py", line 726, in save
    self.save_base(using=using, force_insert=force_insert,
  File "/usr/local/lib/python3.9/site-packages/django/db/models/base.py", line 763, in save_base
    updated = self._save_table(
  File "/usr/local/lib/python3.9/site-packages/django/db/models/base.py", line 868, in _save_table
    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
  File "/usr/local/lib/python3.9/site-packages/django/db/models/base.py", line 906, in _do_insert
    return manager._insert(
  File "/usr/local/lib/python3.9/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/usr/local/lib/python3.9/site-packages/django/db/models/query.py", line 1270, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
  File "/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py", line 1415, in execute_sql
    for sql, params in self.as_sql():
  File "/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py", line 1358, in as_sql
    value_rows = [
  File "/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py", line 1359, in &lt;listcomp&gt;
    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
  File "/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py", line 1359, in &lt;listcomp&gt;
    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
  File "/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py", line 1300, in prepare_value
    value = field.get_db_prep_save(value, connection=self.connection)
  File "/usr/local/lib/python3.9/site-packages/django/db/models/fields/related.py", line 971, in get_db_prep_save
    return self.target_field.get_db_prep_save(value, connection=connection)
  File "/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py", line 842, in get_db_prep_save
    return self.get_db_prep_value(value, connection=connection, prepared=False)
  File "/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py", line 2486, in get_db_prep_value
    value = self.get_prep_value(value)
  File "/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py", line 1825, in get_prep_value
    raise e.__class__(

During handling of the above exception (Field &#x27;id&#x27; expected a number but got &lt;Stock: Microsoft Corporation (MSFT)&gt;.), another exception occurred:
  File "/usr/local/lib/python3.9/site-packages/django/core/handlers/exception.py", line 47, in inner
    response = get_response(request)
  File "/usr/local/lib/python3.9/site-packages/django/core/handlers/base.py", line 181, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/usr/local/lib/python3.9/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/usr/local/lib/python3.9/site-packages/django/views/generic/base.py", line 70, in view
    return self.dispatch(request, *args, **kwargs)
  File "/usr/local/lib/python3.9/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/usr/local/lib/python3.9/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/usr/local/lib/python3.9/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/usr/local/lib/python3.9/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/usr/local/lib/python3.9/site-packages/rest_framework/generics.py", line 190, in post
    return self.create(request, *args, **kwargs)
  File "/usr/local/lib/python3.9/site-packages/rest_framework/mixins.py", line 19, in create
    self.perform_create(serializer)
  File "/backend/portfolio/views.py", line 30, in perform_create
    serializer.save(portfolio=portfolio)
  File "/usr/local/lib/python3.9/site-packages/rest_framework/serializers.py", line 205, in save
    self.instance = self.create(validated_data)
  File "/usr/local/lib/python3.9/site-packages/rest_framework/serializers.py", line 958, in create
    raise TypeError(msg)

Exception Type: TypeError at /api/portfolios/1/add_stock/
Exception Value: Got a `TypeError` when calling `PortfolioStock.objects.create()`. This may be because you have a writable field on the serializer class that is not a valid argument to `PortfolioStock.objects.create()`. You may need to make the field read-only, or override the PortfolioStockSerializer.create() method to handle this correctly.
Original exception was:
 Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 1823, in get_prep_value
    return int(value)
TypeError: int() argument must be a string, a bytes-like object or a number, not &#x27;Stock&#x27;

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.9/site-packages/rest_framework/serializers.py&quot;, line 939, in create
    instance = ModelClass._default_manager.create(**validated_data)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, line 453, in create
    obj.save(force_insert=True, using=self.db)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 726, in save
    self.save_base(using=using, force_insert=force_insert,
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 763, in save_base
    updated = self._save_table(
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 868, in _save_table
    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/base.py&quot;, line 906, in _do_insert
    return manager._insert(
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/manager.py&quot;, line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/query.py&quot;, line 1270, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1415, in execute_sql
    for sql, params in self.as_sql():
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1358, in as_sql
    value_rows = [
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1359, in &lt;listcomp&gt;
    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1359, in &lt;listcomp&gt;
    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/sql/compiler.py&quot;, line 1300, in prepare_value
    value = field.get_db_prep_save(value, connection=self.connection)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/related.py&quot;, line 971, in get_db_prep_save
    return self.target_field.get_db_prep_save(value, connection=connection)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 842, in get_db_prep_save
    return self.get_db_prep_value(value, connection=connection, prepared=False)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 2486, in get_db_prep_value
    value = self.get_prep_value(value)
  File &quot;/usr/local/lib/python3.9/site-packages/django/db/models/fields/__init__.py&quot;, line 1825, in get_prep_value
    raise e.__class__(
TypeError: Field &#x27;id&#x27; expected a number but got &lt;Stock: Microsoft Corporation (MSFT)&gt;.

</textarea>
  <br><br>
  <input type="submit" value="Share this traceback on a public website">
  </div>
</form>
</div>



<div id="requestinfo">
  <h2>Request information</h2>


  
    <h3 id="user-info">USER</h3>
    <p>test</p>
  

  <h3 id="get-info">GET</h3>
  
    <p>No GET data</p>
  

  <h3 id="post-info">POST</h3>
  
    <p>No POST data</p>
  
  <h3 id="files-info">FILES</h3>
  
    <p>No FILES data</p>
  


  <h3 id="cookie-info">COOKIES</h3>
  
    <p>No cookie data</p>
  

  <h3 id="meta-info">META</h3>
  <table class="req">
    <thead>
      <tr>
        <th>Variable</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>CONTENT_LENGTH</td>
          <td class="code"><pre>&#x27;36&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CONTENT_TYPE</td>
          <td class="code"><pre>&#x27;application/json&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DJANGO_SETTINGS_MODULE</td>
          <td class="code"><pre>&#x27;stock_app.settings&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DJANGO_SUPERUSER_EMAIL</td>
          <td class="code"><pre>&#x27;admin@example.com&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DJANGO_SUPERUSER_PASSWORD</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DJANGO_SUPERUSER_USERNAME</td>
          <td class="code"><pre>&#x27;admin&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>GATEWAY_INTERFACE</td>
          <td class="code"><pre>&#x27;CGI/1.1&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>GPG_KEY</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HOME</td>
          <td class="code"><pre>&#x27;/root&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HOSTNAME</td>
          <td class="code"><pre>&#x27;f57799aae845&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_ACCEPT</td>
          <td class="code"><pre>&#x27;*/*&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_ACCEPT_ENCODING</td>
          <td class="code"><pre>&#x27;gzip, deflate, br&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_AUTHORIZATION</td>
          <td class="code"><pre>&#x27;Token f52c03798fec4b8d21893a6eb92678f4dc2990b7&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_CONNECTION</td>
          <td class="code"><pre>&#x27;keep-alive&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_HOST</td>
          <td class="code"><pre>&#x27;localhost:8000&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_POSTMAN_TOKEN</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_USER_AGENT</td>
          <td class="code"><pre>&#x27;PostmanRuntime/7.37.3&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LANG</td>
          <td class="code"><pre>&#x27;C.UTF-8&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PATH</td>
          <td class="code"><pre>&#x27;/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PATH_INFO</td>
          <td class="code"><pre>&#x27;/api/portfolios/1/add_stock/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>POSTGRES_DB</td>
          <td class="code"><pre>&#x27;stock_db&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>POSTGRES_HOST</td>
          <td class="code"><pre>&#x27;db&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>POSTGRES_PASSWORD</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>POSTGRES_PORT</td>
          <td class="code"><pre>&#x27;5432&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>POSTGRES_USER</td>
          <td class="code"><pre>&#x27;postgres&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PWD</td>
          <td class="code"><pre>&#x27;/backend&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PYTHONDONTWRITEBYTECODE</td>
          <td class="code"><pre>&#x27;1&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PYTHONUNBUFFERED</td>
          <td class="code"><pre>&#x27;1&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PYTHON_GET_PIP_SHA256</td>
          <td class="code"><pre>&#x27;dfe9fd5c28dc98b5ac17979a953ea550cec37ae1b47a5116007395bfacff2ab9&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PYTHON_GET_PIP_URL</td>
          <td class="code"><pre>&#x27;https://github.com/pypa/get-pip/raw/dbf0c85f76fb6e1ab42aa672ffca6f0a675d9ee4/public/get-pip.py&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PYTHON_PIP_VERSION</td>
          <td class="code"><pre>&#x27;23.0.1&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PYTHON_SETUPTOOLS_VERSION</td>
          <td class="code"><pre>&#x27;58.1.0&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PYTHON_VERSION</td>
          <td class="code"><pre>&#x27;3.9.19&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>QUERY_STRING</td>
          <td class="code"><pre>&#x27;&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>REMOTE_ADDR</td>
          <td class="code"><pre>&#x27;192.168.208.1&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>REMOTE_HOST</td>
          <td class="code"><pre>&#x27;&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_METHOD</td>
          <td class="code"><pre>&#x27;POST&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>RUN_MAIN</td>
          <td class="code"><pre>&#x27;true&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SCRIPT_NAME</td>
          <td class="code"><pre>&#x27;&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_NAME</td>
          <td class="code"><pre>&#x27;f57799aae845&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PORT</td>
          <td class="code"><pre>&#x27;8000&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PROTOCOL</td>
          <td class="code"><pre>&#x27;HTTP/1.1&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_SOFTWARE</td>
          <td class="code"><pre>&#x27;WSGIServer/0.2&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SHLVL</td>
          <td class="code"><pre>&#x27;1&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>TZ</td>
          <td class="code"><pre>&#x27;UTC&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>_</td>
          <td class="code"><pre>&#x27;/usr/local/bin/python&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.errors</td>
          <td class="code"><pre>&lt;_io.TextIOWrapper name=&#x27;&lt;stderr&gt;&#x27; mode=&#x27;w&#x27; encoding=&#x27;utf-8&#x27;&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.file_wrapper</td>
          <td class="code"><pre>&lt;class &#x27;wsgiref.util.FileWrapper&#x27;&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.input</td>
          <td class="code"><pre>&lt;django.core.handlers.wsgi.LimitedStream object at 0xffffa88d7a00&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multiprocess</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multithread</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.run_once</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.url_scheme</td>
          <td class="code"><pre>&#x27;http&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.version</td>
          <td class="code"><pre>(1, 0)</pre></td>
        </tr>
      
    </tbody>
  </table>


  <h3 id="settings-info">Settings</h3>
  <h4>Using settings module <code>stock_app.settings</code></h4>
  <table class="req">
    <thead>
      <tr>
        <th>Setting</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>ABSOLUTE_URL_OVERRIDES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>ADMINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>ALLOWED_HOSTS</td>
          <td class="code"><pre>[&#x27;your-ec2-public-dns&#x27;, &#x27;localhost&#x27;, &#x27;127.0.0.1&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>APPEND_SLASH</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>AUTHENTICATION_BACKENDS</td>
          <td class="code"><pre>[&#x27;django.contrib.auth.backends.ModelBackend&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>AUTH_PASSWORD_VALIDATORS</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>AUTH_USER_MODEL</td>
          <td class="code"><pre>&#x27;auth.User&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>BASE_DIR</td>
          <td class="code"><pre>PosixPath(&#x27;/backend&#x27;)</pre></td>
        </tr>
      
        <tr>
          <td>CACHES</td>
          <td class="code"><pre>{&#x27;default&#x27;: {&#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.locmem.LocMemCache&#x27;}}</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_ALIAS</td>
          <td class="code"><pre>&#x27;default&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_KEY_PREFIX</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_SECONDS</td>
          <td class="code"><pre>600</pre></td>
        </tr>
      
        <tr>
          <td>CORS_ALLOWED_ORIGINS</td>
          <td class="code"><pre>[&#x27;http://localhost:3000&#x27;, &#x27;http://your-ec2-public-dns&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_AGE</td>
          <td class="code"><pre>31449600</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_HTTPONLY</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_NAME</td>
          <td class="code"><pre>&#x27;csrftoken&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_PATH</td>
          <td class="code"><pre>&#x27;/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_SAMESITE</td>
          <td class="code"><pre>&#x27;Lax&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_FAILURE_VIEW</td>
          <td class="code"><pre>&#x27;django.views.csrf.csrf_failure&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_HEADER_NAME</td>
          <td class="code"><pre>&#x27;HTTP_X_CSRFTOKEN&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_TRUSTED_ORIGINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_USE_SESSIONS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>DATABASES</td>
          <td class="code"><pre>{&#x27;default&#x27;: {&#x27;ATOMIC_REQUESTS&#x27;: False,
             &#x27;AUTOCOMMIT&#x27;: True,
             &#x27;CONN_MAX_AGE&#x27;: 0,
             &#x27;ENGINE&#x27;: &#x27;django.db.backends.postgresql&#x27;,
             &#x27;HOST&#x27;: &#x27;db&#x27;,
             &#x27;NAME&#x27;: &#x27;stock_db&#x27;,
             &#x27;OPTIONS&#x27;: {},
             &#x27;PASSWORD&#x27;: &#x27;********************&#x27;,
             &#x27;PORT&#x27;: &#x27;5432&#x27;,
             &#x27;TEST&#x27;: {&#x27;CHARSET&#x27;: None,
                      &#x27;COLLATION&#x27;: None,
                      &#x27;MIGRATE&#x27;: True,
                      &#x27;MIRROR&#x27;: None,
                      &#x27;NAME&#x27;: None},
             &#x27;TIME_ZONE&#x27;: None,
             &#x27;USER&#x27;: &#x27;postgres&#x27;}}</pre></td>
        </tr>
      
        <tr>
          <td>DATABASE_ROUTERS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>DATA_UPLOAD_MAX_MEMORY_SIZE</td>
          <td class="code"><pre>2621440</pre></td>
        </tr>
      
        <tr>
          <td>DATA_UPLOAD_MAX_NUMBER_FIELDS</td>
          <td class="code"><pre>1000</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_FORMAT</td>
          <td class="code"><pre>&#x27;N j, Y, P&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_INPUT_FORMATS</td>
          <td class="code"><pre>[&#x27;%Y-%m-%d %H:%M:%S&#x27;,
 &#x27;%Y-%m-%d %H:%M:%S.%f&#x27;,
 &#x27;%Y-%m-%d %H:%M&#x27;,
 &#x27;%m/%d/%Y %H:%M:%S&#x27;,
 &#x27;%m/%d/%Y %H:%M:%S.%f&#x27;,
 &#x27;%m/%d/%Y %H:%M&#x27;,
 &#x27;%m/%d/%y %H:%M:%S&#x27;,
 &#x27;%m/%d/%y %H:%M:%S.%f&#x27;,
 &#x27;%m/%d/%y %H:%M&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>DATE_FORMAT</td>
          <td class="code"><pre>&#x27;N j, Y&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DATE_INPUT_FORMATS</td>
          <td class="code"><pre>[&#x27;%Y-%m-%d&#x27;,
 &#x27;%m/%d/%Y&#x27;,
 &#x27;%m/%d/%y&#x27;,
 &#x27;%b %d %Y&#x27;,
 &#x27;%b %d, %Y&#x27;,
 &#x27;%d %b %Y&#x27;,
 &#x27;%d %b, %Y&#x27;,
 &#x27;%B %d %Y&#x27;,
 &#x27;%B %d, %Y&#x27;,
 &#x27;%d %B %Y&#x27;,
 &#x27;%d %B, %Y&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG_PROPAGATE_EXCEPTIONS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>DECIMAL_SEPARATOR</td>
          <td class="code"><pre>&#x27;.&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_AUTO_FIELD</td>
          <td class="code"><pre>&#x27;django.db.models.BigAutoField&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_CHARSET</td>
          <td class="code"><pre>&#x27;utf-8&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_EXCEPTION_REPORTER</td>
          <td class="code"><pre>&#x27;django.views.debug.ExceptionReporter&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_EXCEPTION_REPORTER_FILTER</td>
          <td class="code"><pre>&#x27;django.views.debug.SafeExceptionReporterFilter&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FILE_STORAGE</td>
          <td class="code"><pre>&#x27;django.core.files.storage.FileSystemStorage&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FROM_EMAIL</td>
          <td class="code"><pre>&#x27;webmaster@localhost&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_HASHING_ALGORITHM</td>
          <td class="code"><pre>&#x27;sha256&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_INDEX_TABLESPACE</td>
          <td class="code"><pre>&#x27;&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_TABLESPACE</td>
          <td class="code"><pre>&#x27;&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DISALLOWED_USER_AGENTS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_BACKEND</td>
          <td class="code"><pre>&#x27;django.core.mail.backends.smtp.EmailBackend&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST</td>
          <td class="code"><pre>&#x27;localhost&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_PASSWORD</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_USER</td>
          <td class="code"><pre>&#x27;&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_PORT</td>
          <td class="code"><pre>25</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_CERTFILE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_KEYFILE</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SUBJECT_PREFIX</td>
          <td class="code"><pre>&#x27;[Django] &#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_TIMEOUT</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_LOCALTIME</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_SSL</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_TLS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_DIRECTORY_PERMISSIONS</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_HANDLERS</td>
          <td class="code"><pre>[&#x27;django.core.files.uploadhandler.MemoryFileUploadHandler&#x27;,
 &#x27;django.core.files.uploadhandler.TemporaryFileUploadHandler&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_MAX_MEMORY_SIZE</td>
          <td class="code"><pre>2621440</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_PERMISSIONS</td>
          <td class="code"><pre>420</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_TEMP_DIR</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FIRST_DAY_OF_WEEK</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>FIXTURE_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>FORCE_SCRIPT_NAME</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FORMAT_MODULE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FORM_RENDERER</td>
          <td class="code"><pre>&#x27;django.forms.renderers.DjangoTemplates&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>IGNORABLE_404_URLS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>INSTALLED_APPS</td>
          <td class="code"><pre>[&#x27;django.contrib.admin&#x27;,
 &#x27;django.contrib.auth&#x27;,
 &#x27;django.contrib.contenttypes&#x27;,
 &#x27;django.contrib.sessions&#x27;,
 &#x27;django.contrib.messages&#x27;,
 &#x27;django.contrib.staticfiles&#x27;,
 &#x27;rest_framework&#x27;,
 &#x27;rest_framework.authtoken&#x27;,
 &#x27;portfolio&#x27;,
 &#x27;corsheaders&#x27;,
 &#x27;users&#x27;,
 &#x27;stocks&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>INTERNAL_IPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES</td>
          <td class="code"><pre>[(&#x27;af&#x27;, &#x27;Afrikaans&#x27;),
 (&#x27;ar&#x27;, &#x27;Arabic&#x27;),
 (&#x27;ar-dz&#x27;, &#x27;Algerian Arabic&#x27;),
 (&#x27;ast&#x27;, &#x27;Asturian&#x27;),
 (&#x27;az&#x27;, &#x27;Azerbaijani&#x27;),
 (&#x27;bg&#x27;, &#x27;Bulgarian&#x27;),
 (&#x27;be&#x27;, &#x27;Belarusian&#x27;),
 (&#x27;bn&#x27;, &#x27;Bengali&#x27;),
 (&#x27;br&#x27;, &#x27;Breton&#x27;),
 (&#x27;bs&#x27;, &#x27;Bosnian&#x27;),
 (&#x27;ca&#x27;, &#x27;Catalan&#x27;),
 (&#x27;cs&#x27;, &#x27;Czech&#x27;),
 (&#x27;cy&#x27;, &#x27;Welsh&#x27;),
 (&#x27;da&#x27;, &#x27;Danish&#x27;),
 (&#x27;de&#x27;, &#x27;German&#x27;),
 (&#x27;dsb&#x27;, &#x27;Lower Sorbian&#x27;),
 (&#x27;el&#x27;, &#x27;Greek&#x27;),
 (&#x27;en&#x27;, &#x27;English&#x27;),
 (&#x27;en-au&#x27;, &#x27;Australian English&#x27;),
 (&#x27;en-gb&#x27;, &#x27;British English&#x27;),
 (&#x27;eo&#x27;, &#x27;Esperanto&#x27;),
 (&#x27;es&#x27;, &#x27;Spanish&#x27;),
 (&#x27;es-ar&#x27;, &#x27;Argentinian Spanish&#x27;),
 (&#x27;es-co&#x27;, &#x27;Colombian Spanish&#x27;),
 (&#x27;es-mx&#x27;, &#x27;Mexican Spanish&#x27;),
 (&#x27;es-ni&#x27;, &#x27;Nicaraguan Spanish&#x27;),
 (&#x27;es-ve&#x27;, &#x27;Venezuelan Spanish&#x27;),
 (&#x27;et&#x27;, &#x27;Estonian&#x27;),
 (&#x27;eu&#x27;, &#x27;Basque&#x27;),
 (&#x27;fa&#x27;, &#x27;Persian&#x27;),
 (&#x27;fi&#x27;, &#x27;Finnish&#x27;),
 (&#x27;fr&#x27;, &#x27;French&#x27;),
 (&#x27;fy&#x27;, &#x27;Frisian&#x27;),
 (&#x27;ga&#x27;, &#x27;Irish&#x27;),
 (&#x27;gd&#x27;, &#x27;Scottish Gaelic&#x27;),
 (&#x27;gl&#x27;, &#x27;Galician&#x27;),
 (&#x27;he&#x27;, &#x27;Hebrew&#x27;),
 (&#x27;hi&#x27;, &#x27;Hindi&#x27;),
 (&#x27;hr&#x27;, &#x27;Croatian&#x27;),
 (&#x27;hsb&#x27;, &#x27;Upper Sorbian&#x27;),
 (&#x27;hu&#x27;, &#x27;Hungarian&#x27;),
 (&#x27;hy&#x27;, &#x27;Armenian&#x27;),
 (&#x27;ia&#x27;, &#x27;Interlingua&#x27;),
 (&#x27;id&#x27;, &#x27;Indonesian&#x27;),
 (&#x27;ig&#x27;, &#x27;Igbo&#x27;),
 (&#x27;io&#x27;, &#x27;Ido&#x27;),
 (&#x27;is&#x27;, &#x27;Icelandic&#x27;),
 (&#x27;it&#x27;, &#x27;Italian&#x27;),
 (&#x27;ja&#x27;, &#x27;Japanese&#x27;),
 (&#x27;ka&#x27;, &#x27;Georgian&#x27;),
 (&#x27;kab&#x27;, &#x27;Kabyle&#x27;),
 (&#x27;kk&#x27;, &#x27;Kazakh&#x27;),
 (&#x27;km&#x27;, &#x27;Khmer&#x27;),
 (&#x27;kn&#x27;, &#x27;Kannada&#x27;),
 (&#x27;ko&#x27;, &#x27;Korean&#x27;),
 (&#x27;ky&#x27;, &#x27;Kyrgyz&#x27;),
 (&#x27;lb&#x27;, &#x27;Luxembourgish&#x27;),
 (&#x27;lt&#x27;, &#x27;Lithuanian&#x27;),
 (&#x27;lv&#x27;, &#x27;Latvian&#x27;),
 (&#x27;mk&#x27;, &#x27;Macedonian&#x27;),
 (&#x27;ml&#x27;, &#x27;Malayalam&#x27;),
 (&#x27;mn&#x27;, &#x27;Mongolian&#x27;),
 (&#x27;mr&#x27;, &#x27;Marathi&#x27;),
 (&#x27;my&#x27;, &#x27;Burmese&#x27;),
 (&#x27;nb&#x27;, &#x27;Norwegian Bokmål&#x27;),
 (&#x27;ne&#x27;, &#x27;Nepali&#x27;),
 (&#x27;nl&#x27;, &#x27;Dutch&#x27;),
 (&#x27;nn&#x27;, &#x27;Norwegian Nynorsk&#x27;),
 (&#x27;os&#x27;, &#x27;Ossetic&#x27;),
 (&#x27;pa&#x27;, &#x27;Punjabi&#x27;),
 (&#x27;pl&#x27;, &#x27;Polish&#x27;),
 (&#x27;pt&#x27;, &#x27;Portuguese&#x27;),
 (&#x27;pt-br&#x27;, &#x27;Brazilian Portuguese&#x27;),
 (&#x27;ro&#x27;, &#x27;Romanian&#x27;),
 (&#x27;ru&#x27;, &#x27;Russian&#x27;),
 (&#x27;sk&#x27;, &#x27;Slovak&#x27;),
 (&#x27;sl&#x27;, &#x27;Slovenian&#x27;),
 (&#x27;sq&#x27;, &#x27;Albanian&#x27;),
 (&#x27;sr&#x27;, &#x27;Serbian&#x27;),
 (&#x27;sr-latn&#x27;, &#x27;Serbian Latin&#x27;),
 (&#x27;sv&#x27;, &#x27;Swedish&#x27;),
 (&#x27;sw&#x27;, &#x27;Swahili&#x27;),
 (&#x27;ta&#x27;, &#x27;Tamil&#x27;),
 (&#x27;te&#x27;, &#x27;Telugu&#x27;),
 (&#x27;tg&#x27;, &#x27;Tajik&#x27;),
 (&#x27;th&#x27;, &#x27;Thai&#x27;),
 (&#x27;tk&#x27;, &#x27;Turkmen&#x27;),
 (&#x27;tr&#x27;, &#x27;Turkish&#x27;),
 (&#x27;tt&#x27;, &#x27;Tatar&#x27;),
 (&#x27;udm&#x27;, &#x27;Udmurt&#x27;),
 (&#x27;uk&#x27;, &#x27;Ukrainian&#x27;),
 (&#x27;ur&#x27;, &#x27;Urdu&#x27;),
 (&#x27;uz&#x27;, &#x27;Uzbek&#x27;),
 (&#x27;vi&#x27;, &#x27;Vietnamese&#x27;),
 (&#x27;zh-hans&#x27;, &#x27;Simplified Chinese&#x27;),
 (&#x27;zh-hant&#x27;, &#x27;Traditional Chinese&#x27;)]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES_BIDI</td>
          <td class="code"><pre>[&#x27;he&#x27;, &#x27;ar&#x27;, &#x27;ar-dz&#x27;, &#x27;fa&#x27;, &#x27;ur&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_CODE</td>
          <td class="code"><pre>&#x27;en-us&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_AGE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_HTTPONLY</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_NAME</td>
          <td class="code"><pre>&#x27;django_language&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_PATH</td>
          <td class="code"><pre>&#x27;/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_SAMESITE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>LOCALE_PATHS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING_CONFIG</td>
          <td class="code"><pre>&#x27;logging.config.dictConfig&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_REDIRECT_URL</td>
          <td class="code"><pre>&#x27;/accounts/profile/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_URL</td>
          <td class="code"><pre>&#x27;/accounts/login/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LOGOUT_REDIRECT_URL</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>MANAGERS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_ROOT</td>
          <td class="code"><pre>&#x27;&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_URL</td>
          <td class="code"><pre>&#x27;/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>MESSAGE_STORAGE</td>
          <td class="code"><pre>&#x27;django.contrib.messages.storage.fallback.FallbackStorage&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>MIDDLEWARE</td>
          <td class="code"><pre>[&#x27;django.middleware.security.SecurityMiddleware&#x27;,
 &#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;,
 &#x27;django.middleware.common.CommonMiddleware&#x27;,
 &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,
 &#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;,
 &#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;,
 &#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;,
 &#x27;corsheaders.middleware.CorsMiddleware&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>MIGRATION_MODULES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>MONTH_DAY_FORMAT</td>
          <td class="code"><pre>&#x27;F j&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>NUMBER_GROUPING</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_HASHERS</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_RESET_TIMEOUT</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_RESET_TIMEOUT_DAYS</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PREPEND_WWW</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>REST_FRAMEWORK</td>
          <td class="code"><pre>{&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;: [&#x27;rest_framework.authentication.TokenAuthentication&#x27;],
 &#x27;DEFAULT_PERMISSION_CLASSES&#x27;: [&#x27;rest_framework.permissions.IsAuthenticated&#x27;]}</pre></td>
        </tr>
      
        <tr>
          <td>ROOT_URLCONF</td>
          <td class="code"><pre>&#x27;stock_app.urls&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SECRET_KEY</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_BROWSER_XSS_FILTER</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_CONTENT_TYPE_NOSNIFF</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_INCLUDE_SUBDOMAINS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_PRELOAD</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_SECONDS</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_PROXY_SSL_HEADER</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_REDIRECT_EXEMPT</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_REFERRER_POLICY</td>
          <td class="code"><pre>&#x27;same-origin&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_HOST</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_REDIRECT</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_EMAIL</td>
          <td class="code"><pre>&#x27;root@localhost&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_CACHE_ALIAS</td>
          <td class="code"><pre>&#x27;default&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_AGE</td>
          <td class="code"><pre>1209600</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_HTTPONLY</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_NAME</td>
          <td class="code"><pre>&#x27;sessionid&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_PATH</td>
          <td class="code"><pre>&#x27;/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_SAMESITE</td>
          <td class="code"><pre>&#x27;Lax&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_ENGINE</td>
          <td class="code"><pre>&#x27;django.contrib.sessions.backends.db&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_EXPIRE_AT_BROWSER_CLOSE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_FILE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SAVE_EVERY_REQUEST</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SERIALIZER</td>
          <td class="code"><pre>&#x27;django.contrib.sessions.serializers.JSONSerializer&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SETTINGS_MODULE</td>
          <td class="code"><pre>&#x27;stock_app.settings&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATETIME_FORMAT</td>
          <td class="code"><pre>&#x27;m/d/Y P&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATE_FORMAT</td>
          <td class="code"><pre>&#x27;m/d/Y&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SIGNING_BACKEND</td>
          <td class="code"><pre>&#x27;django.core.signing.TimestampSigner&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SILENCED_SYSTEM_CHECKS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_FINDERS</td>
          <td class="code"><pre>[&#x27;django.contrib.staticfiles.finders.FileSystemFinder&#x27;,
 &#x27;django.contrib.staticfiles.finders.AppDirectoriesFinder&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_STORAGE</td>
          <td class="code"><pre>&#x27;django.contrib.staticfiles.storage.StaticFilesStorage&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_ROOT</td>
          <td class="code"><pre>PosixPath(&#x27;/backend/staticfiles&#x27;)</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_URL</td>
          <td class="code"><pre>&#x27;/static/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>TEMPLATES</td>
          <td class="code"><pre>[{&#x27;APP_DIRS&#x27;: True,
  &#x27;BACKEND&#x27;: &#x27;django.template.backends.django.DjangoTemplates&#x27;,
  &#x27;DIRS&#x27;: [],
  &#x27;OPTIONS&#x27;: {&#x27;context_processors&#x27;: [&#x27;django.template.context_processors.debug&#x27;,
                                     &#x27;django.template.context_processors.request&#x27;,
                                     &#x27;django.contrib.auth.context_processors.auth&#x27;,
                                     &#x27;django.contrib.messages.context_processors.messages&#x27;]}}]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_NON_SERIALIZED_APPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_RUNNER</td>
          <td class="code"><pre>&#x27;django.test.runner.DiscoverRunner&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>THOUSAND_SEPARATOR</td>
          <td class="code"><pre>&#x27;,&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>TIME_FORMAT</td>
          <td class="code"><pre>&#x27;P&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>TIME_INPUT_FORMATS</td>
          <td class="code"><pre>[&#x27;%H:%M:%S&#x27;, &#x27;%H:%M:%S.%f&#x27;, &#x27;%H:%M&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>TIME_ZONE</td>
          <td class="code"><pre>&#x27;UTC&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>USE_I18N</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_L10N</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_THOUSAND_SEPARATOR</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_TZ</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_HOST</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_PORT</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>WSGI_APPLICATION</td>
          <td class="code"><pre>&#x27;stock_app.wsgi.application&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>X_FRAME_OPTIONS</td>
          <td class="code"><pre>&#x27;DENY&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>YEAR_MONTH_FORMAT</td>
          <td class="code"><pre>&#x27;F Y&#x27;</pre></td>
        </tr>
      
    </tbody>
  </table>

</div>

  <div id="explanation">
    <p>
      You’re seeing this error because you have <code>DEBUG = True</code> in your
      Django settings file. Change that to <code>False</code>, and Django will
      display a standard page generated by the handler for this status code.
    </p>
  </div>

</body>
</html>
